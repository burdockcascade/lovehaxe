/*
 * This file was generated by the LOVE2D Haxe bindings generator for Love2D v11.4.
 * Do not modify this file directly.
 * 2024-05-05 16:52:58
 */

package love;

@:native("love.graphics")
extern class Graphics {

	public static function applyTransform(transform:Transform):Void;

	@:overload
	public static function arc(drawmode:DrawMode, x:Float, y:Float, radius:Float, angle1:Float, angle2:Float, segments:Float):Void;

	@:overload
	public static function arc(drawmode:DrawMode, arctype:ArcType, x:Float, y:Float, radius:Float, angle1:Float, angle2:Float, segments:Float):Void;

	@:overload
	public static function captureScreenshot(filename:String):Void;

	@:overload
	public static function captureScreenshot(callback:Function):Void;

	@:overload
	public static function captureScreenshot(channel:Channel):Void;

	@:overload
	public static function circle(mode:DrawMode, x:Float, y:Float, radius:Float):Void;

	@:overload
	public static function circle(mode:DrawMode, x:Float, y:Float, radius:Float, segments:Float):Void;

	@:overload
	public static function clear():Void;

	@:overload
	public static function clear(r:Float, g:Float, b:Float, a:Float, clearstencil:Bool, cleardepth:Bool):Void;

	@:overload
	public static function clear(color:Table<Dynamic,Dynamic>, ...:Table<Dynamic,Dynamic>, clearstencil:Bool, cleardepth:Bool):Void;

	@:overload
	public static function clear(clearcolor:Bool, clearstencil:Bool, cleardepth:Bool):Void;

	@:overload
	public static function discard(discardcolor:Bool, discardstencil:Bool):Void;

	@:overload
	public static function discard(discardcolors:Table<Dynamic,Dynamic>, discardstencil:Bool):Void;

	@:overload
	public static function draw(drawable:Drawable, x:Float, y:Float, r:Float, sx:Float, sy:Float, ox:Float, oy:Float, kx:Float, ky:Float):Void;

	@:overload
	public static function draw(texture:Texture, quad:Quad, x:Float, y:Float, r:Float, sx:Float, sy:Float, ox:Float, oy:Float, kx:Float, ky:Float):Void;

	@:overload
	public static function draw(drawable:Drawable, transform:Transform):Void;

	@:overload
	public static function draw(texture:Texture, quad:Quad, transform:Transform):Void;

	@:overload
	public static function drawInstanced(mesh:Mesh, instancecount:Float, x:Float, y:Float, r:Float, sx:Float, sy:Float, ox:Float, oy:Float, kx:Float, ky:Float):Void;

	@:overload
	public static function drawInstanced(mesh:Mesh, instancecount:Float, transform:Transform):Void;

	@:overload
	public static function drawLayer(texture:Texture, layerindex:Float, x:Float, y:Float, r:Float, sx:Float, sy:Float, ox:Float, oy:Float, kx:Float, ky:Float):Void;

	@:overload
	public static function drawLayer(texture:Texture, layerindex:Float, quad:Quad, x:Float, y:Float, r:Float, sx:Float, sy:Float, ox:Float, oy:Float, kx:Float, ky:Float):Void;

	@:overload
	public static function drawLayer(texture:Texture, layerindex:Float, transform:Transform):Void;

	@:overload
	public static function drawLayer(texture:Texture, layerindex:Float, quad:Quad, transform:Transform):Void;

	@:overload
	public static function ellipse(mode:DrawMode, x:Float, y:Float, radiusx:Float, radiusy:Float):Void;

	@:overload
	public static function ellipse(mode:DrawMode, x:Float, y:Float, radiusx:Float, radiusy:Float, segments:Float):Void;

	public static function flushBatch():Void;

	public static function getBackgroundColor():BackgroundColor;

	public static function getBlendMode():BlendMode;

	public static function getCanvas():Canvas;

	@:overload
	public static function getCanvasFormats():Table<Dynamic,Dynamic>;

	@:overload
	public static function getCanvasFormats(readable:Bool):Table<Dynamic,Dynamic>;

	public static function getColor():Color;

	public static function getColorMask():ColorMask;

	public static function getDPIScale():Float;

	public static function getDefaultFilter():DefaultFilter;

	public static function getDepthMode():DepthMode;

	public static function getDimensions():Dimensions;

	public static function getFont():Font;

	public static function getFrontFaceWinding():VertexWinding;

	public static function getHeight():Float;

	public static function getImageFormats():Table<Dynamic,Dynamic>;

	public static function getLineJoin():LineJoin;

	public static function getLineStyle():LineStyle;

	public static function getLineWidth():Float;

	public static function getMeshCullMode():CullMode;

	public static function getPixelDimensions():PixelDimensions;

	public static function getPixelHeight():Float;

	public static function getPixelWidth():Float;

	public static function getPointSize():Float;

	public static function getRendererInfo():RendererInfo;

	public static function getScissor():Scissor;

	public static function getShader():Shader;

	public static function getStackDepth():Float;

	@:overload
	public static function getStats():Table<Dynamic,Dynamic>;

	@:overload
	public static function getStats(stats:Table<Dynamic,Dynamic>):Table<Dynamic,Dynamic>;

	public static function getStencilTest():StencilTest;

	public static function getSupported():Table<Dynamic,Dynamic>;

	public static function getSystemLimits():Table<Dynamic,Dynamic>;

	public static function getTextureTypes():Table<Dynamic,Dynamic>;

	public static function getWidth():Float;

	public static function intersectScissor(x:Float, y:Float, width:Float, height:Float):Void;

	public static function inverseTransformPoint(screenX:Float, screenY:Float):InverseTransformPointResult;

	public static function isActive():Bool;

	public static function isGammaCorrect():Bool;

	public static function isWireframe():Bool;

	@:overload
	public static function line(x1:Float, y1:Float, x2:Float, y2:Float, ...:Float):Void;

	@:overload
	public static function line(points:Table<Dynamic,Dynamic>):Void;

	public static function newArrayImage(slices:Table<Dynamic,Dynamic>, settings:Table<Dynamic,Dynamic>):Image;

	@:overload
	public static function newCanvas():Canvas;

	@:overload
	public static function newCanvas(width:Float, height:Float):Canvas;

	@:overload
	public static function newCanvas(width:Float, height:Float, settings:Table<Dynamic,Dynamic>):Canvas;

	@:overload
	public static function newCanvas(width:Float, height:Float, layers:Float, settings:Table<Dynamic,Dynamic>):Canvas;

	@:overload
	public static function newCubeImage(filename:String, settings:Table<Dynamic,Dynamic>):Image;

	@:overload
	public static function newCubeImage(faces:Table<Dynamic,Dynamic>, settings:Table<Dynamic,Dynamic>):Image;

	@:overload
	public static function newFont(filename:String):Font;

	@:overload
	public static function newFont(filename:String, size:Float, hinting:HintingMode, dpiscale:Float):Font;

	@:overload
	public static function newFont(filename:String, imagefilename:String):Font;

	@:overload
	public static function newFont(size:Float, hinting:HintingMode, dpiscale:Float):Font;

	@:overload
	public static function newImage(filename:String, settings:Table<Dynamic,Dynamic>):Image;

	@:overload
	public static function newImage(fileData:FileData, settings:Table<Dynamic,Dynamic>):Image;

	@:overload
	public static function newImage(imageData:ImageData, settings:Table<Dynamic,Dynamic>):Image;

	@:overload
	public static function newImage(compressedImageData:CompressedImageData, settings:Table<Dynamic,Dynamic>):Image;

	@:overload
	public static function newImageFont(filename:String, glyphs:String):Font;

	@:overload
	public static function newImageFont(imageData:ImageData, glyphs:String):Font;

	@:overload
	public static function newImageFont(filename:String, glyphs:String, extraspacing:Float):Font;

	@:overload
	public static function newMesh(vertices:Table<Dynamic,Dynamic>, mode:MeshDrawMode, usage:SpriteBatchUsage):Mesh;

	@:overload
	public static function newMesh(vertexcount:Float, mode:MeshDrawMode, usage:SpriteBatchUsage):Mesh;

	@:overload
	public static function newMesh(vertexformat:Table<Dynamic,Dynamic>, vertices:Table<Dynamic,Dynamic>, mode:MeshDrawMode, usage:SpriteBatchUsage):Mesh;

	@:overload
	public static function newMesh(vertexformat:Table<Dynamic,Dynamic>, vertexcount:Float, mode:MeshDrawMode, usage:SpriteBatchUsage):Mesh;

	@:overload
	public static function newMesh(vertexcount:Float, texture:Texture, mode:MeshDrawMode):Mesh;

	@:overload
	public static function newParticleSystem(image:Image, buffer:Float):ParticleSystem;

	@:overload
	public static function newParticleSystem(texture:Texture, buffer:Float):ParticleSystem;

	@:overload
	public static function newQuad(x:Float, y:Float, width:Float, height:Float, sw:Float, sh:Float):Quad;

	@:overload
	public static function newQuad(x:Float, y:Float, width:Float, height:Float, texture:Texture):Quad;

	@:overload
	public static function newShader(code:String):Shader;

	@:overload
	public static function newShader(pixelcode:String, vertexcode:String):Shader;

	@:overload
	public static function newSpriteBatch(image:Image, maxsprites:Float):SpriteBatch;

	@:overload
	public static function newSpriteBatch(image:Image, maxsprites:Float, usage:SpriteBatchUsage):SpriteBatch;

	@:overload
	public static function newSpriteBatch(texture:Texture, maxsprites:Float, usage:SpriteBatchUsage):SpriteBatch;

	@:overload
	public static function newText(font:Font, textstring:String):Text;

	@:overload
	public static function newText(font:Font, coloredtext:Table<Dynamic,Dynamic>):Text;

	@:overload
	public static function newVideo(filename:String):Video;

	@:overload
	public static function newVideo(videostream:VideoStream):Video;

	@:overload
	public static function newVideo(filename:String, settings:Table<Dynamic,Dynamic>):Video;

	@:overload
	public static function newVideo(filename:String, loadaudio:Bool):Video;

	@:overload
	public static function newVideo(videostream:VideoStream, loadaudio:Bool):Video;

	public static function newVolumeImage(layers:Table<Dynamic,Dynamic>, settings:Table<Dynamic,Dynamic>):Image;

	public static function origin():Void;

	@:overload
	public static function points(x:Float, y:Float, ...:Float):Void;

	@:overload
	public static function points(points:Table<Dynamic,Dynamic>):Void;

	@:overload
	public static function points(points:Table<Dynamic,Dynamic>):Void;

	@:overload
	public static function polygon(mode:DrawMode, ...:Float):Void;

	@:overload
	public static function polygon(mode:DrawMode, vertices:Table<Dynamic,Dynamic>):Void;

	public static function pop():Void;

	public static function present():Void;

	@:overload
	public static function print(text:String, x:Float, y:Float, r:Float, sx:Float, sy:Float, ox:Float, oy:Float, kx:Float, ky:Float):Void;

	@:overload
	public static function print(coloredtext:Table<Dynamic,Dynamic>, x:Float, y:Float, angle:Float, sx:Float, sy:Float, ox:Float, oy:Float, kx:Float, ky:Float):Void;

	@:overload
	public static function print(text:String, transform:Transform):Void;

	@:overload
	public static function print(coloredtext:Table<Dynamic,Dynamic>, transform:Transform):Void;

	@:overload
	public static function print(text:String, font:Font, transform:Transform):Void;

	@:overload
	public static function print(coloredtext:Table<Dynamic,Dynamic>, font:Font, transform:Transform):Void;

	@:overload
	public static function printf(text:String, x:Float, y:Float, limit:Float, align:AlignMode, r:Float, sx:Float, sy:Float, ox:Float, oy:Float, kx:Float, ky:Float):Void;

	@:overload
	public static function printf(text:String, font:Font, x:Float, y:Float, limit:Float, align:AlignMode, r:Float, sx:Float, sy:Float, ox:Float, oy:Float, kx:Float, ky:Float):Void;

	@:overload
	public static function printf(text:String, transform:Transform, limit:Float, align:AlignMode):Void;

	@:overload
	public static function printf(text:String, font:Font, transform:Transform, limit:Float, align:AlignMode):Void;

	@:overload
	public static function printf(coloredtext:Table<Dynamic,Dynamic>, x:Float, y:Float, limit:Float, align:AlignMode, angle:Float, sx:Float, sy:Float, ox:Float, oy:Float, kx:Float, ky:Float):Void;

	@:overload
	public static function printf(coloredtext:Table<Dynamic,Dynamic>, font:Font, x:Float, y:Float, limit:Float, align:AlignMode, angle:Float, sx:Float, sy:Float, ox:Float, oy:Float, kx:Float, ky:Float):Void;

	@:overload
	public static function printf(coloredtext:Table<Dynamic,Dynamic>, transform:Transform, limit:Float, align:AlignMode):Void;

	@:overload
	public static function printf(coloredtext:Table<Dynamic,Dynamic>, font:Font, transform:Transform, limit:Float, align:AlignMode):Void;

	@:overload
	public static function push():Void;

	@:overload
	public static function push(stack:StackType):Void;

	@:overload
	public static function rectangle(mode:DrawMode, x:Float, y:Float, width:Float, height:Float):Void;

	@:overload
	public static function rectangle(mode:DrawMode, x:Float, y:Float, width:Float, height:Float, rx:Float, ry:Float, segments:Float):Void;

	public static function replaceTransform(transform:Transform):Void;

	public static function reset():Void;

	public static function rotate(angle:Float):Void;

	public static function scale(sx:Float, sy:Float):Void;

	@:overload
	public static function setBackgroundColor(red:Float, green:Float, blue:Float, alpha:Float):Void;

	@:overload
	public static function setBackgroundColor(rgba:Table<Dynamic,Dynamic>):Void;

	@:overload
	public static function setBlendMode(mode:BlendMode):Void;

	@:overload
	public static function setBlendMode(mode:BlendMode, alphamode:BlendAlphaMode):Void;

	@:overload
	public static function setCanvas(canvas:Canvas, mipmap:Float):Void;

	@:overload
	public static function setCanvas():Void;

	@:overload
	public static function setCanvas(canvas1:Canvas, canvas2:Canvas, ...:Canvas):Void;

	@:overload
	public static function setCanvas(canvas:Canvas, slice:Float, mipmap:Float):Void;

	@:overload
	public static function setCanvas(setup:Table<Dynamic,Dynamic>):Void;

	@:overload
	public static function setColor(red:Float, green:Float, blue:Float, alpha:Float):Void;

	@:overload
	public static function setColor(rgba:Table<Dynamic,Dynamic>):Void;

	@:overload
	public static function setColorMask(red:Bool, green:Bool, blue:Bool, alpha:Bool):Void;

	@:overload
	public static function setColorMask():Void;

	public static function setDefaultFilter(min:FilterMode, mag:FilterMode, anisotropy:Float):Void;

	@:overload
	public static function setDepthMode(comparemode:CompareMode, write:Bool):Void;

	@:overload
	public static function setDepthMode():Void;

	public static function setFont(font:Font):Void;

	public static function setFrontFaceWinding(winding:VertexWinding):Void;

	public static function setLineJoin(join:LineJoin):Void;

	public static function setLineStyle(style:LineStyle):Void;

	public static function setLineWidth(width:Float):Void;

	public static function setMeshCullMode(mode:CullMode):Void;

	@:overload
	public static function setNewFont(size:Float):Font;

	@:overload
	public static function setNewFont(filename:String, size:Float):Font;

	@:overload
	public static function setNewFont(file:File, size:Float):Font;

	@:overload
	public static function setNewFont(data:Data, size:Float):Font;

	@:overload
	public static function setNewFont(rasterizer:Rasterizer):Font;

	public static function setPointSize(size:Float):Void;

	@:overload
	public static function setScissor(x:Float, y:Float, width:Float, height:Float):Void;

	@:overload
	public static function setScissor():Void;

	@:overload
	public static function setShader(shader:Shader):Void;

	@:overload
	public static function setShader():Void;

	@:overload
	public static function setStencilTest(comparemode:CompareMode, comparevalue:Float):Void;

	@:overload
	public static function setStencilTest():Void;

	public static function setWireframe(enable:Bool):Void;

	public static function shear(kx:Float, ky:Float):Void;

	public static function stencil(stencilfunction:Function, action:StencilAction, value:Float, keepvalues:Bool):Void;

	public static function transformPoint(globalX:Float, globalY:Float):TransformPointResult;

	public static function translate(dx:Float, dy:Float):Void;

	@:overload
	public static function validateShader(gles:Bool, code:String):ValidateShaderResult;

	@:overload
	public static function validateShader(gles:Bool, pixelcode:String, vertexcode:String):ValidateShaderResult;

}

extern class Canvas {

	public static function generateMipmaps():Void;

	public static function getMSAA():Float;

	public static function getMipmapMode():MipmapMode;

	@:overload
	public static function newImageData():ImageData;

	@:overload
	public static function newImageData(slice:Float, mipmap:Float, x:Float, y:Float, width:Float, height:Float):ImageData;

	public static function renderTo(func:Function):Void;

}

extern class Drawable {

}

extern class Font {

	public static function getAscent():Float;

	public static function getBaseline():Float;

	public static function getDPIScale():Float;

	public static function getDescent():Float;

	public static function getFilter():Filter;

	public static function getHeight():Float;

	@:overload
	public static function getKerning(leftchar:String, rightchar:String):Float;

	@:overload
	public static function getKerning(leftglyph:Float, rightglyph:Float):Float;

	public static function getLineHeight():Float;

	public static function getWidth(text:String):Float;

	public static function getWrap(text:String, wraplimit:Float):Wrap;

	@:overload
	public static function hasGlyphs(text:String):Bool;

	@:overload
	public static function hasGlyphs(character1:String, character2:String):Bool;

	@:overload
	public static function hasGlyphs(codepoint1:Float, codepoint2:Float):Bool;

	public static function setFallbacks(fallbackfont1:Font, ...:Font):Void;

	public static function setFilter(min:FilterMode, mag:FilterMode, anisotropy:Float):Void;

	public static function setLineHeight(height:Float):Void;

}

extern class Image {

	public static function getFlags():Table<Dynamic,Dynamic>;

	public static function isCompressed():Bool;

	public static function replacePixels(data:ImageData, slice:Float, mipmap:Float, x:Float, y:Float, reloadmipmaps:Bool):Void;

}

extern class Mesh {

	@:overload
	public static function attachAttribute(name:String, mesh:Mesh):Void;

	@:overload
	public static function attachAttribute(name:String, mesh:Mesh, step:VertexAttributeStep, attachname:String):Void;

	@:overload
	public static function attachAttribute(name:String, mesh:Mesh):Void;

	@:overload
	public static function attachAttribute(name:String, mesh:Mesh, step:VertexAttributeStep, attachname:String):Void;

	public static function detachAttribute(name:String):Bool;

	public static function getDrawMode():MeshDrawMode;

	public static function getDrawRange():DrawRange;

	public static function getTexture():Texture;

	@:overload
	public static function getVertex(index:Float):Vertex;

	@:overload
	public static function getVertex(index:Float):Vertex;

	public static function getVertexAttribute(vertexindex:Float, attributeindex:Float):VertexAttribute;

	public static function getVertexCount():Float;

	public static function getVertexFormat():Table<Dynamic,Dynamic>;

	public static function getVertexMap():Table<Dynamic,Dynamic>;

	public static function isAttributeEnabled(name:String):Bool;

	public static function setAttributeEnabled(name:String, enable:Bool):Void;

	public static function setDrawMode(mode:MeshDrawMode):Void;

	@:overload
	public static function setDrawRange(start:Float, count:Float):Void;

	@:overload
	public static function setDrawRange():Void;

	@:overload
	public static function setTexture(texture:Texture):Void;

	@:overload
	public static function setTexture():Void;

	@:overload
	public static function setVertex(index:Float, attributecomponent:Float, ...:Float):Void;

	@:overload
	public static function setVertex(index:Float, vertex:Table<Dynamic,Dynamic>):Void;

	@:overload
	public static function setVertex(index:Float, x:Float, y:Float, u:Float, v:Float, r:Float, g:Float, b:Float, a:Float):Void;

	@:overload
	public static function setVertex(index:Float, vertex:Table<Dynamic,Dynamic>):Void;

	public static function setVertexAttribute(vertexindex:Float, attributeindex:Float, value1:Float, value2:Float, ...:Float):Void;

	@:overload
	public static function setVertexMap(map:Table<Dynamic,Dynamic>):Void;

	@:overload
	public static function setVertexMap(vi1:Float, vi2:Float, vi3:Float):Void;

	@:overload
	public static function setVertexMap(data:Data, datatype:IndexDataType):Void;

	@:overload
	public static function setVertices(vertices:Table<Dynamic,Dynamic>, startvertex:Float, count:Float):Void;

	@:overload
	public static function setVertices(data:Data, startvertex:Float):Void;

	@:overload
	public static function setVertices(vertices:Table<Dynamic,Dynamic>):Void;

}

extern class ParticleSystem {

	public static function clone():ParticleSystem;

	public static function emit(numparticles:Float):Void;

	public static function getBufferSize():Float;

	public static function getColors():Colors;

	public static function getCount():Float;

	public static function getDirection():Float;

	public static function getEmissionArea():EmissionArea;

	public static function getEmissionRate():Float;

	public static function getEmitterLifetime():Float;

	public static function getInsertMode():ParticleInsertMode;

	public static function getLinearAcceleration():LinearAcceleration;

	public static function getLinearDamping():LinearDamping;

	public static function getOffset():Offset;

	public static function getParticleLifetime():ParticleLifetime;

	public static function getPosition():Position;

	public static function getQuads():Table<Dynamic,Dynamic>;

	public static function getRadialAcceleration():RadialAcceleration;

	public static function getRotation():Rotation;

	public static function getSizeVariation():Float;

	public static function getSizes():Sizes;

	public static function getSpeed():Speed;

	public static function getSpin():Spin;

	public static function getSpinVariation():Float;

	public static function getSpread():Float;

	public static function getTangentialAcceleration():TangentialAcceleration;

	public static function getTexture():Texture;

	public static function hasRelativeRotation():Bool;

	public static function isActive():Bool;

	public static function isPaused():Bool;

	public static function isStopped():Bool;

	public static function moveTo(x:Float, y:Float):Void;

	public static function pause():Void;

	public static function reset():Void;

	public static function setBufferSize(size:Float):Void;

	@:overload
	public static function setColors(r1:Float, g1:Float, b1:Float, a1:Float, r2:Float, g2:Float, b2:Float, a2:Float, r8:Float, g8:Float, b8:Float, a8:Float):Void;

	@:overload
	public static function setColors(rgba1:Table<Dynamic,Dynamic>, rgba2:Table<Dynamic,Dynamic>, rgba8:Table<Dynamic,Dynamic>):Void;

	public static function setDirection(direction:Float):Void;

	public static function setEmissionArea(distribution:AreaSpreadDistribution, dx:Float, dy:Float, angle:Float, directionRelativeToCenter:Bool):Void;

	public static function setEmissionRate(rate:Float):Void;

	public static function setEmitterLifetime(life:Float):Void;

	public static function setInsertMode(mode:ParticleInsertMode):Void;

	public static function setLinearAcceleration(xmin:Float, ymin:Float, xmax:Float, ymax:Float):Void;

	public static function setLinearDamping(min:Float, max:Float):Void;

	public static function setOffset(x:Float, y:Float):Void;

	public static function setParticleLifetime(min:Float, max:Float):Void;

	public static function setPosition(x:Float, y:Float):Void;

	@:overload
	public static function setQuads(quad1:Quad, quad2:Quad):Void;

	@:overload
	public static function setQuads(quads:Table<Dynamic,Dynamic>):Void;

	public static function setRadialAcceleration(min:Float, max:Float):Void;

	public static function setRelativeRotation(enable:Bool):Void;

	public static function setRotation(min:Float, max:Float):Void;

	public static function setSizeVariation(variation:Float):Void;

	public static function setSizes(size1:Float, size2:Float, size8:Float):Void;

	public static function setSpeed(min:Float, max:Float):Void;

	public static function setSpin(min:Float, max:Float):Void;

	public static function setSpinVariation(variation:Float):Void;

	public static function setSpread(spread:Float):Void;

	public static function setTangentialAcceleration(min:Float, max:Float):Void;

	public static function setTexture(texture:Texture):Void;

	public static function start():Void;

	public static function stop():Void;

	public static function update(dt:Float):Void;

}

extern class Quad {

	public static function getTextureDimensions():TextureDimensions;

	public static function getViewport():Viewport;

	public static function setViewport(x:Float, y:Float, w:Float, h:Float, sw:Float, sh:Float):Void;

}

extern class Shader {

	public static function getWarnings():String;

	public static function hasUniform(name:String):Bool;

	@:overload
	public static function send(name:String, number:Float, ...:Float):Void;

	@:overload
	public static function send(name:String, vector:Table<Dynamic,Dynamic>, ...:Table<Dynamic,Dynamic>):Void;

	@:overload
	public static function send(name:String, matrix:Table<Dynamic,Dynamic>, ...:Table<Dynamic,Dynamic>):Void;

	@:overload
	public static function send(name:String, texture:Texture):Void;

	@:overload
	public static function send(name:String, boolean:Bool, ...:Bool):Void;

	@:overload
	public static function send(name:String, matrixlayout:MatrixLayout, matrix:Table<Dynamic,Dynamic>, ...:Table<Dynamic,Dynamic>):Void;

	@:overload
	public static function send(name:String, data:Data, offset:Float, size:Float):Void;

	@:overload
	public static function send(name:String, data:Data, matrixlayout:MatrixLayout, offset:Float, size:Float):Void;

	@:overload
	public static function send(name:String, matrixlayout:MatrixLayout, data:Data, offset:Float, size:Float):Void;

	public static function sendColor(name:String, color:Table<Dynamic,Dynamic>, ...:Table<Dynamic,Dynamic>):Void;

}

extern class SpriteBatch {

	@:overload
	public static function add(x:Float, y:Float, r:Float, sx:Float, sy:Float, ox:Float, oy:Float, kx:Float, ky:Float):Float;

	@:overload
	public static function add(quad:Quad, x:Float, y:Float, r:Float, sx:Float, sy:Float, ox:Float, oy:Float, kx:Float, ky:Float):Float;

	@:overload
	public static function addLayer(layerindex:Float, x:Float, y:Float, r:Float, sx:Float, sy:Float, ox:Float, oy:Float, kx:Float, ky:Float):Float;

	@:overload
	public static function addLayer(layerindex:Float, quad:Quad, x:Float, y:Float, r:Float, sx:Float, sy:Float, ox:Float, oy:Float, kx:Float, ky:Float):Float;

	@:overload
	public static function addLayer(layerindex:Float, transform:Transform):Float;

	@:overload
	public static function addLayer(layerindex:Float, quad:Quad, transform:Transform):Float;

	public static function attachAttribute(name:String, mesh:Mesh):Void;

	public static function clear():Void;

	public static function flush():Void;

	public static function getBufferSize():Float;

	public static function getColor():Color;

	public static function getCount():Float;

	public static function getTexture():Texture;

	@:overload
	public static function set(spriteindex:Float, x:Float, y:Float, r:Float, sx:Float, sy:Float, ox:Float, oy:Float, kx:Float, ky:Float):Void;

	@:overload
	public static function set(spriteindex:Float, quad:Quad, x:Float, y:Float, r:Float, sx:Float, sy:Float, ox:Float, oy:Float, kx:Float, ky:Float):Void;

	@:overload
	public static function setColor(r:Float, g:Float, b:Float, a:Float):Void;

	@:overload
	public static function setColor():Void;

	@:overload
	public static function setDrawRange(start:Float, count:Float):Void;

	@:overload
	public static function setDrawRange():Void;

	@:overload
	public static function setLayer(spriteindex:Float, layerindex:Float, x:Float, y:Float, r:Float, sx:Float, sy:Float, ox:Float, oy:Float, kx:Float, ky:Float):Void;

	@:overload
	public static function setLayer(spriteindex:Float, layerindex:Float, quad:Quad, x:Float, y:Float, r:Float, sx:Float, sy:Float, ox:Float, oy:Float, kx:Float, ky:Float):Void;

	@:overload
	public static function setLayer(spriteindex:Float, layerindex:Float, transform:Transform):Void;

	@:overload
	public static function setLayer(spriteindex:Float, layerindex:Float, quad:Quad, transform:Transform):Void;

	public static function setTexture(texture:Texture):Void;

}

extern class Text {

	@:overload
	public static function add(textstring:String, x:Float, y:Float, angle:Float, sx:Float, sy:Float, ox:Float, oy:Float, kx:Float, ky:Float):Float;

	@:overload
	public static function add(coloredtext:Table<Dynamic,Dynamic>, x:Float, y:Float, angle:Float, sx:Float, sy:Float, ox:Float, oy:Float, kx:Float, ky:Float):Float;

	@:overload
	public static function addf(textstring:String, wraplimit:Float, align:AlignMode, x:Float, y:Float, angle:Float, sx:Float, sy:Float, ox:Float, oy:Float, kx:Float, ky:Float):Float;

	@:overload
	public static function addf(coloredtext:Table<Dynamic,Dynamic>, wraplimit:Float, align:AlignMode, x:Float, y:Float, angle:Float, sx:Float, sy:Float, ox:Float, oy:Float, kx:Float, ky:Float):Float;

	public static function clear():Void;

	@:overload
	public static function getDimensions():Dimensions;

	@:overload
	public static function getDimensions(index:Float):Dimensions;

	public static function getFont():Font;

	@:overload
	public static function getHeight():Float;

	@:overload
	public static function getHeight(index:Float):Float;

	@:overload
	public static function getWidth():Float;

	@:overload
	public static function getWidth(index:Float):Float;

	@:overload
	public static function set(textstring:String):Void;

	@:overload
	public static function set(coloredtext:Table<Dynamic,Dynamic>):Void;

	public static function setFont(font:Font):Void;

	@:overload
	public static function setf(textstring:String, wraplimit:Float, align:AlignMode):Void;

	@:overload
	public static function setf(coloredtext:Table<Dynamic,Dynamic>, wraplimit:Float, align:AlignMode):Void;

}

extern class Texture {

	public static function getDPIScale():Float;

	public static function getDepth():Float;

	public static function getDepthSampleMode():CompareMode;

	public static function getDimensions():Dimensions;

	public static function getFilter():Filter;

	public static function getFormat():PixelFormat;

	public static function getHeight():Float;

	public static function getLayerCount():Float;

	public static function getMipmapCount():Float;

	public static function getMipmapFilter():MipmapFilter;

	public static function getPixelDimensions():PixelDimensions;

	public static function getPixelHeight():Float;

	public static function getPixelWidth():Float;

	public static function getTextureType():TextureType;

	public static function getWidth():Float;

	public static function getWrap():Wrap;

	public static function isReadable():Bool;

	public static function setDepthSampleMode(compare:CompareMode):Void;

	public static function setFilter(min:FilterMode, mag:FilterMode, anisotropy:Float):Void;

	@:overload
	public static function setMipmapFilter(filtermode:FilterMode, sharpness:Float):Void;

	@:overload
	public static function setMipmapFilter():Void;

	public static function setWrap(horiz:WrapMode, vert:WrapMode, depth:WrapMode):Void;

}

extern class Video {

	public static function getDimensions():Dimensions;

	public static function getFilter():Filter;

	public static function getHeight():Float;

	public static function getSource():Source;

	public static function getStream():VideoStream;

	public static function getWidth():Float;

	public static function isPlaying():Bool;

	public static function pause():Void;

	public static function play():Void;

	public static function rewind():Void;

	public static function seek(offset:Float):Void;

	public static function setFilter(min:FilterMode, mag:FilterMode, anisotropy:Float):Void;

	public static function setSource(source:Source):Void;

	public static function tell():Float;

}

extern enum AlignMode {
	CENTER;
	LEFT;
	RIGHT;
	JUSTIFY;
}

extern enum ArcType {
	PIE;
	OPEN;
	CLOSED;
}

extern enum AreaSpreadDistribution {
	UNIFORM;
	NORMAL;
	ELLIPSE;
	BORDERELLIPSE;
	BORDERRECTANGLE;
	NONE;
}

extern enum BlendAlphaMode {
	ALPHAMULTIPLY;
	PREMULTIPLIED;
}

extern enum BlendMode {
	ALPHA;
	REPLACE;
	SCREEN;
	ADD;
	SUBTRACT;
	MULTIPLY;
	LIGHTEN;
	DARKEN;
	ADDITIVE;
	SUBTRACTIVE;
	MULTIPLICATIVE;
	PREMULTIPLIED;
}

extern enum CompareMode {
	EQUAL;
	NOTEQUAL;
	LESS;
	LEQUAL;
	GEQUAL;
	GREATER;
	NEVER;
	ALWAYS;
}

extern enum CullMode {
	BACK;
	FRONT;
	NONE;
}

extern enum DrawMode {
	FILL;
	LINE;
}

extern enum FilterMode {
	LINEAR;
	NEAREST;
}

extern enum GraphicsFeature {
	CLAMPZERO;
	LIGHTEN;
	MULTICANVASFORMATS;
	GLSL3;
	INSTANCING;
	FULLNPOT;
	PIXELSHADERHIGHP;
	SHADERDERIVATIVES;
}

extern enum GraphicsLimit {
	POINTSIZE;
	TEXTURESIZE;
	MULTICANVAS;
	CANVASMSAA;
	TEXTURELAYERS;
	VOLUMETEXTURESIZE;
	CUBETEXTURESIZE;
	ANISOTROPY;
}

extern enum IndexDataType {
	UINT16;
	UINT32;
}

extern enum LineJoin {
	MITER;
	NONE;
	BEVEL;
}

extern enum LineStyle {
	ROUGH;
	SMOOTH;
}

extern enum MeshDrawMode {
	FAN;
	STRIP;
	TRIANGLES;
	POINTS;
}

extern enum MipmapMode {
	NONE;
	AUTO;
	MANUAL;
}

extern enum ParticleInsertMode {
	TOP;
	BOTTOM;
	RANDOM;
}

extern enum SpriteBatchUsage {
	DYNAMIC;
	STATIC;
	STREAM;
}

extern enum StackType {
	TRANSFORM;
	ALL;
}

extern enum StencilAction {
	REPLACE;
	INCREMENT;
	DECREMENT;
	INCREMENTWRAP;
	DECREMENTWRAP;
	INVERT;
}

extern enum TextureType {
	2D;
	ARRAY;
	CUBE;
	VOLUME;
}

extern enum VertexAttributeStep {
	PERVERTEX;
	PERINSTANCE;
}

extern enum VertexWinding {
	CW;
	CCW;
}

extern enum WrapMode {
	CLAMP;
	REPEAT;
	MIRROREDREPEAT;
	CLAMPZERO;
}

extern class Filter {

	public var min:FilterMode;
	public var mag:FilterMode;
	public var anisotropy:Float;

}

extern class Wrap {

	public var width:Float;
	public var wrappedtext:Table<Dynamic,Dynamic>;

}

extern class DrawRange {

	public var min:Float;
	public var max:Float;

}

extern class Vertex {

	public var attributecomponent:Float;
	public var ...:Float;

}

extern class VertexAttribute {

	public var value1:Float;
	public var value2:Float;
	public var ...:Float;

}

extern class Colors {

	public var r1:Float;
	public var g1:Float;
	public var b1:Float;
	public var a1:Float;
	public var r2:Float;
	public var g2:Float;
	public var b2:Float;
	public var a2:Float;
	public var r8:Float;
	public var g8:Float;
	public var b8:Float;
	public var a8:Float;

}

extern class EmissionArea {

	public var distribution:AreaSpreadDistribution;
	public var dx:Float;
	public var dy:Float;
	public var angle:Float;
	public var directionRelativeToCenter:Bool;

}

extern class LinearAcceleration {

	public var xmin:Float;
	public var ymin:Float;
	public var xmax:Float;
	public var ymax:Float;

}

extern class LinearDamping {

	public var min:Float;
	public var max:Float;

}

extern class Offset {

	public var ox:Float;
	public var oy:Float;

}

extern class ParticleLifetime {

	public var min:Float;
	public var max:Float;

}

extern class Position {

	public var x:Float;
	public var y:Float;

}

extern class RadialAcceleration {

	public var min:Float;
	public var max:Float;

}

extern class Rotation {

	public var min:Float;
	public var max:Float;

}

extern class Sizes {

	public var size1:Float;
	public var size2:Float;
	public var size8:Float;

}

extern class Speed {

	public var min:Float;
	public var max:Float;

}

extern class Spin {

	public var min:Float;
	public var max:Float;
	public var variation:Float;

}

extern class TangentialAcceleration {

	public var min:Float;
	public var max:Float;

}

extern class TextureDimensions {

	public var sw:Float;
	public var sh:Float;

}

extern class Viewport {

	public var x:Float;
	public var y:Float;
	public var w:Float;
	public var h:Float;

}

extern class Color {

	public var r:Float;
	public var g:Float;
	public var b:Float;
	public var a:Float;

}

extern class Dimensions {

	public var width:Float;
	public var height:Float;

}

extern class MipmapFilter {

	public var mode:FilterMode;
	public var sharpness:Float;

}

extern class PixelDimensions {

	public var pixelwidth:Float;
	public var pixelheight:Float;

}

extern class BackgroundColor {

	public var r:Float;
	public var g:Float;
	public var b:Float;
	public var a:Float;

}

extern class BlendMode {

	public var mode:BlendMode;
	public var alphamode:BlendAlphaMode;

}

extern class ColorMask {

	public var r:Bool;
	public var g:Bool;
	public var b:Bool;
	public var a:Bool;

}

extern class DefaultFilter {

	public var min:FilterMode;
	public var mag:FilterMode;
	public var anisotropy:Float;

}

extern class DepthMode {

	public var comparemode:CompareMode;
	public var write:Bool;

}

extern class RendererInfo {

	public var name:String;
	public var version:String;
	public var vendor:String;
	public var device:String;

}

extern class Scissor {

	public var x:Float;
	public var y:Float;
	public var width:Float;
	public var height:Float;

}

extern class StencilTest {

	public var comparemode:CompareMode;
	public var comparevalue:Float;

}

extern class InverseTransformPointResult {

	public var globalX:Float;
	public var globalY:Float;

}

extern class TransformPointResult {

	public var screenX:Float;
	public var screenY:Float;

}

extern class ValidateShaderResult {

	public var status:Bool;
	public var message:String;

}

