/*
 * This file was generated by the LOVE2D Haxe bindings generator for Love2D v11.4.
 * Do not modify this file directly.
 * 2024-05-05 23:35:57
 */

package love;

import lua.Table;
import love.Filesystem.File;
import love.Physics.Transform;
import love.Font.Rasterizer;
import love.Video.VideoStream;
import love.Love2D.Object;
import love.Image.CompressedImageData;
import love.Filesystem.FileData;
import love.Thread.Channel;
import love.Audio.Source;
import love.Data.Data;
import love.Image.ImageData;

extern class SpriteBatch extends Drawable {
	public static function add(x:Float, y:Float, r:Float = 0, sx:Float = 1, sy:Float = Sx, ox:Float = 0, oy:Float = 0, kx:Float = 0, ky:Float = 0):Float;
	public static function addLayer(layerindex:Float, x:Float = 0, y:Float = 0, r:Float = 0, sx:Float = 1, sy:Float = Sx, ox:Float = 0, oy:Float = 0, kx:Float = 0, ky:Float = 0):Float;
	public static function attachAttribute(name:String, mesh:Mesh):Void;
	public static function clear():Void;
	public static function flush():Void;
	public static function getBufferSize():Float;
	public static function getColor():Color;
	public static function getCount():Float;
	public static function getTexture():Texture;
	public static function set(spriteindex:Float, x:Float, y:Float, r:Float = 0, sx:Float = 1, sy:Float = Sx, ox:Float = 0, oy:Float = 0, kx:Float = 0, ky:Float = 0):Void;
	public static function setColor(r:Float, g:Float, b:Float, a:Float = 1):Void;
	public static function setDrawRange(start:Float, count:Float):Void;
	public static function setLayer(spriteindex:Float, layerindex:Float, x:Float = 0, y:Float = 0, r:Float = 0, sx:Float = 1, sy:Float = Sx, ox:Float = 0, oy:Float = 0, kx:Float = 0, ky:Float = 0):Void;
	public static function setTexture(texture:Texture):Void;
}

extern class StencilTest {
	public var comparemode:CompareMode;
	public var comparevalue:Float;
}

extern class InverseTransformPointResult {
	public var globalX:Float;
	public var globalY:Float;
}

extern class Dimensions {
	public var width:Float;
	public var height:Float;
}

extern class Sizes {
	public var size1:Float;
	public var size2:Float;
	public var size8:Float;
}

extern class TransformPointResult {
	public var screenX:Float;
	public var screenY:Float;
}

extern class Position {
	public var x:Float;
	public var y:Float;
}

extern class Texture extends Drawable {
	public static function getDPIScale():Float;
	public static function getDepth():Float;
	public static function getDepthSampleMode():CompareMode;
	public static function getDimensions():Dimensions;
	public static function getFilter():Filter;
	public static function getFormat():PixelFormat;
	public static function getHeight():Float;
	public static function getLayerCount():Float;
	public static function getMipmapCount():Float;
	public static function getMipmapFilter():MipmapFilter;
	public static function getPixelDimensions():PixelDimensions;
	public static function getPixelHeight():Float;
	public static function getPixelWidth():Float;
	public static function getTextureType():TextureType;
	public static function getWidth():Float;
	public static function getWrap():Wrap;
	public static function isReadable():Bool;
	public static function setDepthSampleMode(compare:CompareMode):Void;
	public static function setFilter(min:FilterMode, mag:FilterMode = Min, anisotropy:Float = 1):Void;
	public static function setMipmapFilter(filtermode:FilterMode, sharpness:Float = 0):Void;
	public static function setWrap(horiz:WrapMode, vert:WrapMode = Horiz, depth:WrapMode = Horiz):Void;
}

extern class Text extends Drawable {
	public static function add(textstring:String, x:Float = 0, y:Float = 0, angle:Float = 0, sx:Float = 1, sy:Float = Sx, ox:Float = 0, oy:Float = 0, kx:Float = 0, ky:Float = 0):Float;
	public static function addf(textstring:String, wraplimit:Float, align:AlignMode, x:Float, y:Float, angle:Float = 0, sx:Float = 1, sy:Float = Sx, ox:Float = 0, oy:Float = 0, kx:Float = 0, ky:Float = 0):Float;
	public static function clear():Void;
	public static function getDimensions():Dimensions;
	public static function getFont():Font;
	public static function getHeight():Float;
	public static function getWidth():Float;
	public static function set(textstring:String):Void;
	public static function setFont(font:Font):Void;
	public static function setf(textstring:String, wraplimit:Float, align:AlignMode):Void;
}

extern class TextureDimensions {
	public var sw:Float;
	public var sh:Float;
}

extern class ParticleSystem extends Drawable {
	public static function clone():ParticleSystem;
	public static function emit(numparticles:Float):Void;
	public static function getBufferSize():Float;
	public static function getColors():Colors;
	public static function getCount():Float;
	public static function getDirection():Float;
	public static function getEmissionArea():EmissionArea;
	public static function getEmissionRate():Float;
	public static function getEmitterLifetime():Float;
	public static function getInsertMode():ParticleInsertMode;
	public static function getLinearAcceleration():LinearAcceleration;
	public static function getLinearDamping():LinearDamping;
	public static function getOffset():Offset;
	public static function getParticleLifetime():ParticleLifetime;
	public static function getPosition():Position;
	public static function getQuads():Table<Dynamic,Dynamic>;
	public static function getRadialAcceleration():RadialAcceleration;
	public static function getRotation():Rotation;
	public static function getSizeVariation():Float;
	public static function getSizes():Sizes;
	public static function getSpeed():Speed;
	public static function getSpin():Spin;
	public static function getSpinVariation():Float;
	public static function getSpread():Float;
	public static function getTangentialAcceleration():TangentialAcceleration;
	public static function getTexture():Texture;
	public static function hasRelativeRotation():Bool;
	public static function isActive():Bool;
	public static function isPaused():Bool;
	public static function isStopped():Bool;
	public static function moveTo(x:Float, y:Float):Void;
	public static function pause():Void;
	public static function reset():Void;
	public static function setBufferSize(size:Float):Void;
	public static function setColors(r1:Float, g1:Float, b1:Float, a1:Float = 1, r2:Float = Null, g2:Float = Null, b2:Float = Null, a2:Float = 1, r8:Float = Null, g8:Float = Null, b8:Float = Null, a8:Float = 1):Void;
	public static function setDirection(direction:Float):Void;
	public static function setEmissionArea(distribution:AreaSpreadDistribution, dx:Float, dy:Float, angle:Float = 0, directionRelativeToCenter:Bool = False):Void;
	public static function setEmissionRate(rate:Float):Void;
	public static function setEmitterLifetime(life:Float):Void;
	public static function setInsertMode(mode:ParticleInsertMode):Void;
	public static function setLinearAcceleration(xmin:Float, ymin:Float, xmax:Float = Xmin, ymax:Float = Ymin):Void;
	public static function setLinearDamping(min:Float, max:Float = Min):Void;
	public static function setOffset(x:Float, y:Float):Void;
	public static function setParticleLifetime(min:Float, max:Float = Min):Void;
	public static function setPosition(x:Float, y:Float):Void;
	public static function setQuads(quad1:Quad, quad2:Quad):Void;
	public static function setRadialAcceleration(min:Float, max:Float = Min):Void;
	public static function setRelativeRotation(enable:Bool):Void;
	public static function setRotation(min:Float, max:Float = Min):Void;
	public static function setSizeVariation(variation:Float):Void;
	public static function setSizes(size1:Float, size2:Float = Null, size8:Float = Null):Void;
	public static function setSpeed(min:Float, max:Float = Min):Void;
	public static function setSpin(min:Float, max:Float = Min):Void;
	public static function setSpinVariation(variation:Float):Void;
	public static function setSpread(spread:Float):Void;
	public static function setTangentialAcceleration(min:Float, max:Float = Min):Void;
	public static function setTexture(texture:Texture):Void;
	public static function start():Void;
	public static function stop():Void;
	public static function update(dt:Float):Void;
}

extern class Spin {
	public var min:Float;
	public var max:Float;
	public var variation:Float;
}

extern class Filter {
	public var min:FilterMode;
	public var mag:FilterMode;
	public var anisotropy:Float;
}

extern class Scissor {
	public var x:Float;
	public var y:Float;
	public var width:Float;
	public var height:Float;
}

extern class MipmapFilter {
	public var mode:FilterMode;
	public var sharpness:Float;
}

extern class Viewport {
	public var x:Float;
	public var y:Float;
	public var w:Float;
	public var h:Float;
}

extern class ParticleLifetime {
	public var min:Float;
	public var max:Float;
}

extern class RendererInfo {
	public var name:String;
	public var version:String;
	public var vendor:String;
	public var device:String;
}

extern class Color {
	public var r:Float;
	public var g:Float;
	public var b:Float;
	public var a:Float;
}

extern class Image extends Texture {
	public static function getFlags():Table<Dynamic,Dynamic>;
	public static function isCompressed():Bool;
	public static function replacePixels(data:ImageData, slice:Float = 1, mipmap:Float = 1, x:Float = 0, y:Float = 0, reloadmipmaps:Bool = False):Void;
}

extern class Shader extends Object {
	public static function getWarnings():String;
	public static function hasUniform(name:String):Bool;
	public static function send(name:String, number:Float, ...:Float):Void;
	public static function sendColor(name:String, color:Table<Dynamic,Dynamic>, ...:Table<Dynamic,Dynamic>):Void;
}

extern class DefaultFilter {
	public var min:FilterMode;
	public var mag:FilterMode;
	public var anisotropy:Float;
}

extern class TangentialAcceleration {
	public var min:Float;
	public var max:Float;
}

extern class Video extends Drawable {
	public static function getDimensions():Dimensions;
	public static function getFilter():Filter;
	public static function getHeight():Float;
	public static function getSource():Source;
	public static function getStream():VideoStream;
	public static function getWidth():Float;
	public static function isPlaying():Bool;
	public static function pause():Void;
	public static function play():Void;
	public static function rewind():Void;
	public static function seek(offset:Float):Void;
	public static function setFilter(min:FilterMode, mag:FilterMode, anisotropy:Float = 1):Void;
	public static function setSource(source:Source = Null):Void;
	public static function tell():Float;
}

extern class ValidateShaderResult {
	public var status:Bool;
	public var message:String;
}

extern class Speed {
	public var min:Float;
	public var max:Float;
}

extern class Offset {
	public var ox:Float;
	public var oy:Float;
}

extern class BlendMode {
	public var mode:BlendMode;
	public var alphamode:BlendAlphaMode;
}

extern class LinearDamping {
	public var min:Float;
	public var max:Float;
}

extern class EmissionArea {
	public var distribution:AreaSpreadDistribution;
	public var dx:Float;
	public var dy:Float;
	public var angle:Float;
	public var directionRelativeToCenter:Bool;
}

extern class Mesh extends Drawable {
	public static function attachAttribute(name:String, mesh:Mesh):Void;
	public static function attachAttribute(name:String, mesh:Mesh):Void;
	public static function detachAttribute(name:String):Bool;
	public static function getDrawMode():MeshDrawMode;
	public static function getDrawRange():DrawRange;
	public static function getTexture():Texture;
	public static function getVertex(index:Float):Vertex;
	public static function getVertexAttribute(vertexindex:Float, attributeindex:Float):VertexAttribute;
	public static function getVertexCount():Float;
	public static function getVertexFormat():Table<Dynamic,Dynamic>;
	public static function getVertexMap():Table<Dynamic,Dynamic>;
	public static function isAttributeEnabled(name:String):Bool;
	public static function setAttributeEnabled(name:String, enable:Bool):Void;
	public static function setDrawMode(mode:MeshDrawMode):Void;
	public static function setDrawRange(start:Float, count:Float):Void;
	public static function setTexture(texture:Texture):Void;
	public static function setVertex(index:Float, attributecomponent:Float, ...:Float):Void;
	public static function setVertexAttribute(vertexindex:Float, attributeindex:Float, value1:Float, value2:Float, ...:Float):Void;
	public static function setVertexMap(map:Table<Dynamic,Dynamic>):Void;
	public static function setVertices(vertices:Table<Dynamic,Dynamic>, startvertex:Float = 1, count:Float = All):Void;
}

extern class BackgroundColor {
	public var r:Float;
	public var g:Float;
	public var b:Float;
	public var a:Float;
}

extern class Rotation {
	public var min:Float;
	public var max:Float;
}

extern class ColorMask {
	public var r:Bool;
	public var g:Bool;
	public var b:Bool;
	public var a:Bool;
}

extern class DepthMode {
	public var comparemode:CompareMode;
	public var write:Bool;
}

extern class Wrap {
	public var horiz:WrapMode;
	public var vert:WrapMode;
	public var depth:WrapMode;
}

extern class Graphics {
	public static function applyTransform(transform:Transform):Void;
	public static function arc(drawmode:DrawMode, x:Float, y:Float, radius:Float, angle1:Float, angle2:Float, segments:Float = 10):Void;
	public static function captureScreenshot(filename:String):Void;
	public static function circle(mode:DrawMode, x:Float, y:Float, radius:Float):Void;
	public static function clear():Void;
	public static function discard(discardcolor:Bool = True, discardstencil:Bool = True):Void;
	public static function draw(drawable:Drawable, x:Float = 0, y:Float = 0, r:Float = 0, sx:Float = 1, sy:Float = Sx, ox:Float = 0, oy:Float = 0, kx:Float = 0, ky:Float = 0):Void;
	public static function drawInstanced(mesh:Mesh, instancecount:Float, x:Float = 0, y:Float = 0, r:Float = 0, sx:Float = 1, sy:Float = Sx, ox:Float = 0, oy:Float = 0, kx:Float = 0, ky:Float = 0):Void;
	public static function drawLayer(texture:Texture, layerindex:Float, x:Float = 0, y:Float = 0, r:Float = 0, sx:Float = 1, sy:Float = Sx, ox:Float = 0, oy:Float = 0, kx:Float = 0, ky:Float = 0):Void;
	public static function ellipse(mode:DrawMode, x:Float, y:Float, radiusx:Float, radiusy:Float):Void;
	public static function flushBatch():Void;
	public static function getBackgroundColor():BackgroundColor;
	public static function getBlendMode():BlendMode;
	public static function getCanvas():Canvas;
	public static function getCanvasFormats():Table<Dynamic,Dynamic>;
	public static function getColor():Color;
	public static function getColorMask():ColorMask;
	public static function getDPIScale():Float;
	public static function getDefaultFilter():DefaultFilter;
	public static function getDepthMode():DepthMode;
	public static function getDimensions():Dimensions;
	public static function getFont():Font;
	public static function getFrontFaceWinding():VertexWinding;
	public static function getHeight():Float;
	public static function getImageFormats():Table<Dynamic,Dynamic>;
	public static function getLineJoin():LineJoin;
	public static function getLineStyle():LineStyle;
	public static function getLineWidth():Float;
	public static function getMeshCullMode():CullMode;
	public static function getPixelDimensions():PixelDimensions;
	public static function getPixelHeight():Float;
	public static function getPixelWidth():Float;
	public static function getPointSize():Float;
	public static function getRendererInfo():RendererInfo;
	public static function getScissor():Scissor;
	public static function getShader():Shader;
	public static function getStackDepth():Float;
	public static function getStats():Table<Dynamic,Dynamic>;
	public static function getStencilTest():StencilTest;
	public static function getSupported():Table<Dynamic,Dynamic>;
	public static function getSystemLimits():Table<Dynamic,Dynamic>;
	public static function getTextureTypes():Table<Dynamic,Dynamic>;
	public static function getWidth():Float;
	public static function intersectScissor(x:Float, y:Float, width:Float, height:Float):Void;
	public static function inverseTransformPoint(screenX:Float, screenY:Float):InverseTransformPointResult;
	public static function isActive():Bool;
	public static function isGammaCorrect():Bool;
	public static function isWireframe():Bool;
	public static function line(x1:Float, y1:Float, x2:Float, y2:Float, ...:Float):Void;
	public static function newArrayImage(slices:Table<Dynamic,Dynamic>, settings:Table<Dynamic,Dynamic> = Null):Image;
	public static function newCanvas():Canvas;
	public static function newCubeImage(filename:String, settings:Table<Dynamic,Dynamic> = Null):Image;
	public static function newFont(filename:String):Font;
	public static function newImage(filename:String, settings:Table<Dynamic,Dynamic>):Image;
	public static function newImageFont(filename:String, glyphs:String):Font;
	public static function newMesh(vertices:Table<Dynamic,Dynamic>, mode:MeshDrawMode = 'fan', usage:SpriteBatchUsage = 'dynamic'):Mesh;
	public static function newParticleSystem(image:Image, buffer:Float = 1000):ParticleSystem;
	public static function newQuad(x:Float, y:Float, width:Float, height:Float, sw:Float, sh:Float):Quad;
	public static function newShader(code:String):Shader;
	public static function newSpriteBatch(image:Image, maxsprites:Float = 1000):SpriteBatch;
	public static function newText(font:Font, textstring:String = Null):Text;
	public static function newVideo(filename:String):Video;
	public static function newVolumeImage(layers:Table<Dynamic,Dynamic>, settings:Table<Dynamic,Dynamic> = Null):Image;
	public static function origin():Void;
	public static function points(x:Float, y:Float, ...:Float):Void;
	public static function polygon(mode:DrawMode, ...:Float):Void;
	public static function pop():Void;
	public static function present():Void;
	public static function print(text:String, x:Float = 0, y:Float = 0, r:Float = 0, sx:Float = 1, sy:Float = Sx, ox:Float = 0, oy:Float = 0, kx:Float = 0, ky:Float = 0):Void;
	public static function printf(text:String, x:Float, y:Float, limit:Float, align:AlignMode = 'left', r:Float = 0, sx:Float = 1, sy:Float = Sx, ox:Float = 0, oy:Float = 0, kx:Float = 0, ky:Float = 0):Void;
	public static function push():Void;
	public static function rectangle(mode:DrawMode, x:Float, y:Float, width:Float, height:Float):Void;
	public static function replaceTransform(transform:Transform):Void;
	public static function reset():Void;
	public static function rotate(angle:Float):Void;
	public static function scale(sx:Float, sy:Float = Sx):Void;
	public static function setBackgroundColor(red:Float, green:Float, blue:Float, alpha:Float = 1):Void;
	public static function setBlendMode(mode:BlendMode):Void;
	public static function setCanvas(canvas:Canvas, mipmap:Float = 1):Void;
	public static function setColor(red:Float, green:Float, blue:Float, alpha:Float = 1):Void;
	public static function setColorMask(red:Bool, green:Bool, blue:Bool, alpha:Bool):Void;
	public static function setDefaultFilter(min:FilterMode, mag:FilterMode = Min, anisotropy:Float = 1):Void;
	public static function setDepthMode(comparemode:CompareMode, write:Bool):Void;
	public static function setFont(font:Font):Void;
	public static function setFrontFaceWinding(winding:VertexWinding):Void;
	public static function setLineJoin(join:LineJoin):Void;
	public static function setLineStyle(style:LineStyle):Void;
	public static function setLineWidth(width:Float):Void;
	public static function setMeshCullMode(mode:CullMode):Void;
	public static function setNewFont(size:Float = 12):Font;
	public static function setPointSize(size:Float):Void;
	public static function setScissor(x:Float, y:Float, width:Float, height:Float):Void;
	public static function setShader(shader:Shader):Void;
	public static function setStencilTest(comparemode:CompareMode, comparevalue:Float):Void;
	public static function setWireframe(enable:Bool):Void;
	public static function shear(kx:Float, ky:Float):Void;
	public static function stencil(stencilfunction:Function, action:StencilAction = 'replace', value:Float = 1, keepvalues:Bool = False):Void;
	public static function transformPoint(globalX:Float, globalY:Float):TransformPointResult;
	public static function translate(dx:Float, dy:Float):Void;
	public static function validateShader(gles:Bool, code:String):ValidateShaderResult;
}

extern class PixelDimensions {
	public var pixelwidth:Float;
	public var pixelheight:Float;
}

extern class Font extends Object {
	public static function getAscent():Float;
	public static function getBaseline():Float;
	public static function getDPIScale():Float;
	public static function getDescent():Float;
	public static function getFilter():Filter;
	public static function getHeight():Float;
	public static function getKerning(leftchar:String, rightchar:String):Float;
	public static function getLineHeight():Float;
	public static function getWidth(text:String):Float;
	public static function getWrap(text:String, wraplimit:Float):Wrap;
	public static function hasGlyphs(text:String):Bool;
	public static function setFallbacks(fallbackfont1:Font, ...:Font):Void;
	public static function setFilter(min:FilterMode, mag:FilterMode, anisotropy:Float = 1):Void;
	public static function setLineHeight(height:Float):Void;
}

extern class Canvas extends Texture {
	public static function generateMipmaps():Void;
	public static function getMSAA():Float;
	public static function getMipmapMode():MipmapMode;
	public static function newImageData():ImageData;
	public static function renderTo(func:Function):Void;
}

extern class Drawable extends Object {
}

extern class Quad extends Object {
	public static function getTextureDimensions():TextureDimensions;
	public static function getViewport():Viewport;
	public static function setViewport(x:Float, y:Float, w:Float, h:Float, sw:Float, sh:Float):Void;
}

extern class RadialAcceleration {
	public var min:Float;
	public var max:Float;
}

extern class LinearAcceleration {
	public var xmin:Float;
	public var ymin:Float;
	public var xmax:Float;
	public var ymax:Float;
}

extern class VertexAttribute {
	public var value1:Float;
	public var value2:Float;
	public var ...:Float;
}

extern class DrawRange {
	public var min:Float;
	public var max:Float;
}

extern class Vertex {
	public var x:Float;
	public var y:Float;
	public var u:Float;
	public var v:Float;
	public var r:Float;
	public var g:Float;
	public var b:Float;
	public var a:Float;
}

extern class Colors {
	public var r1:Float;
	public var g1:Float;
	public var b1:Float;
	public var a1:Float;
	public var r2:Float;
	public var g2:Float;
	public var b2:Float;
	public var a2:Float;
	public var r8:Float;
	public var g8:Float;
	public var b8:Float;
	public var a8:Float;
}

extern enum StackType {
	TRANSFORM;
	ALL;
}

extern enum ParticleInsertMode {
	TOP;
	BOTTOM;
	RANDOM;
}

extern enum MipmapMode {
	NONE;
	AUTO;
	MANUAL;
}

extern enum MeshDrawMode {
	FAN;
	STRIP;
	TRIANGLES;
	POINTS;
}

extern enum GraphicsLimit {
	POINTSIZE;
	TEXTURESIZE;
	MULTICANVAS;
	CANVASMSAA;
	TEXTURELAYERS;
	VOLUMETEXTURESIZE;
	CUBETEXTURESIZE;
	ANISOTROPY;
}

extern enum DrawMode {
	FILL;
	LINE;
}

extern enum CullMode {
	BACK;
	FRONT;
	NONE;
}

extern enum BlendAlphaMode {
	ALPHAMULTIPLY;
	PREMULTIPLIED;
}

extern enum LineJoin {
	MITER;
	NONE;
	BEVEL;
}

extern enum CompareMode {
	EQUAL;
	NOTEQUAL;
	LESS;
	LEQUAL;
	GEQUAL;
	GREATER;
	NEVER;
	ALWAYS;
}

extern enum StencilAction {
	REPLACE;
	INCREMENT;
	DECREMENT;
	INCREMENTWRAP;
	DECREMENTWRAP;
	INVERT;
}

extern enum IndexDataType {
	UINT16;
	UINT32;
}

extern enum BlendMode {
	ALPHA;
	REPLACE;
	SCREEN;
	ADD;
	SUBTRACT;
	MULTIPLY;
	LIGHTEN;
	DARKEN;
	ADDITIVE;
	SUBTRACTIVE;
	MULTIPLICATIVE;
	PREMULTIPLIED;
}

extern enum AreaSpreadDistribution {
	UNIFORM;
	NORMAL;
	ELLIPSE;
	BORDERELLIPSE;
	BORDERRECTANGLE;
	NONE;
}

extern enum TextureType {
	2D;
	ARRAY;
	CUBE;
	VOLUME;
}

extern enum SpriteBatchUsage {
	DYNAMIC;
	STATIC;
	STREAM;
}

extern enum LineStyle {
	ROUGH;
	SMOOTH;
}

extern enum FilterMode {
	LINEAR;
	NEAREST;
}

extern enum ArcType {
	PIE;
	OPEN;
	CLOSED;
}

extern enum VertexAttributeStep {
	PERVERTEX;
	PERINSTANCE;
}

extern enum GraphicsFeature {
	CLAMPZERO;
	LIGHTEN;
	MULTICANVASFORMATS;
	GLSL3;
	INSTANCING;
	FULLNPOT;
	PIXELSHADERHIGHP;
	SHADERDERIVATIVES;
}

extern enum WrapMode {
	CLAMP;
	REPEAT;
	MIRROREDREPEAT;
	CLAMPZERO;
}

extern enum VertexWinding {
	CW;
	CCW;
}

extern enum AlignMode {
	CENTER;
	LEFT;
	RIGHT;
	JUSTIFY;
}

