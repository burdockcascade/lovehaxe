/*
 * This file was generated by the LOVE2D Haxe bindings generator for Love2D v11.5.
 * Do not modify this file directly.
 * 2024-05-12 18:21:25
 */

package love;

import lua.Table;
import lua.UserData;
import love.Love2D.Object;
import love.Love2D.Data;

@:multiReturn
extern class Buffer {

	public var mode:BufferMode;
	public var size:Float;
}

extern class DroppedFile extends File {

}

@:multiReturn
extern class WriteResult {

	public var success:Bool;
	public var message:String;
}

@:multiReturn
extern class FlushResult {

	public var success:Bool;
	public var err:String;
}

@:multiReturn
extern class NewFileResult {

	public var file:File;
	public var errorstr:String;
}

extern class File extends Object {

	function close():Bool;

	function flush():FlushResult;

	function getBuffer():Buffer;

	function getFilename():String;

	function getMode():FileMode;

	function getSize():Float;

	function isEOF():Bool;

	function isOpen():Bool;

	function lines():Dynamic;

	function open(mode:FileMode):OpenResult;

	@:overload(function (bytes:Float):ReadResult {})
	function read(container:ContainerType, bytes:Float):ReadResult;

	function seek(pos:Float):Bool;

	function setBuffer(mode:BufferMode, size:Float):SetBufferResult;

	function tell():Float;

	@:overload(function (data:String, size:Float):WriteResult {})
	function write(data:Data, size:Float):WriteResult;

}

@:multiReturn
extern class SetBufferResult {

	public var success:Bool;
	public var errorstr:String;
}

@:multiReturn
extern class ReadResult {

	public var contents:String;
	public var size:Float;
	public var contents:Null;
	public var error:String;
}

@:multiReturn
extern class NewFileDataResult {

	public var data:FileData;
	public var err:String;
}

@:multiReturn
extern class OpenResult {

	public var ok:Bool;
	public var err:String;
}

extern class FilesystemModule {

	@:overload(function (name:String, data:String, size:Float):AppendResult {})
	public static function append(name:String, data:Data, size:Float):AppendResult;

	public static function areSymlinksEnabled():Bool;

	public static function createDirectory(name:String):Bool;

	public static function getAppdataDirectory():String;

	public static function getCRequirePath():String;

	@:overload(function (dir:String):Table<Dynamic,Dynamic> {})
	public static function getDirectoryItems(dir:String, callback:Dynamic):Table<Dynamic,Dynamic>;

	public static function getIdentity():String;

	@:overload(function (path:String, filtertype:FileType):Table<Dynamic,Dynamic> {})
	@:overload(function (path:String, info:Table<Dynamic,Dynamic>):Table<Dynamic,Dynamic> {})
	public static function getInfo(path:String, filtertype:FileType, info:Table<Dynamic,Dynamic>):Table<Dynamic,Dynamic>;

	public static function getRealDirectory(filepath:String):String;

	public static function getRequirePath():String;

	public static function getSaveDirectory():String;

	public static function getSource():String;

	public static function getSourceBaseDirectory():String;

	public static function getUserDirectory():String;

	public static function getWorkingDirectory():String;

	public static function init(appname:String):Void;

	public static function isFused():Bool;

	public static function lines(name:String):Dynamic;

	public static function load(name:String):LoadResult;

	@:overload(function (archive:String, mountpoint:String, appendToPath:Bool):Bool {})
	@:overload(function (filedata:FileData, mountpoint:String, appendToPath:Bool):Bool {})
	public static function mount(data:Data, archivename:String, mountpoint:String, appendToPath:Bool):Bool;

	@:overload(function (filename:String):File {})
	public static function newFile(filename:String, mode:FileMode):NewFileResult;

	@:overload(function (contents:String, name:String):FileData {})
	@:overload(function (originaldata:Data, name:String):FileData {})
	public static function newFileData(filepath:String):NewFileDataResult;

	@:overload(function (name:String, size:Float):ReadResult {})
	public static function read(container:ContainerType, name:String, size:Float):ReadResult;

	public static function remove(name:String):Bool;

	public static function setCRequirePath(paths:String):Void;

	@:overload(function (name:String):Void {})
	public static function setIdentity(name:String):Void;

	public static function setRequirePath(paths:String):Void;

	public static function setSource(path:String):Void;

	public static function setSymlinksEnabled(enable:Bool):Void;

	public static function unmount(archive:String):Bool;

	@:overload(function (name:String, data:String, size:Float):WriteResult {})
	public static function write(name:String, data:Data, size:Float):WriteResult;

}

@:multiReturn
extern class LoadResult {

	public var chunk:Dynamic;
	public var errormsg:String;
}

@:multiReturn
extern class AppendResult {

	public var success:Bool;
	public var errormsg:String;
}

extern class FileData extends Data {

	function getExtension():String;

	function getFilename():String;

}

extern enum FileType {
	FILE;
	DIRECTORY;
	SYMLINK;
	OTHER;
}

extern enum FileDecoder {
	FILE;
	BASE64;
}

extern enum FileMode {
	R;
	W;
	A;
	C;
}

extern enum BufferMode {
	NONE;
	LINE;
	FULL;
}

