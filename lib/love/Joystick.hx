/*
 * This file was generated by the LOVE2D Haxe bindings generator for Love2D v11.5.
 * Do not modify this file directly.
 * 2024-05-12 20:41:35
 */

package love;

import lua.Table;
import lua.UserData;
import love.Love2D.Object;

@:multiReturn
extern class JoystickID {

	public var instanceid:Float;
	public var id:Float;
}

extern class Joystick extends Object {

	@:overload(function (left:Float, right:Float):Bool {})
	@:overload(function ():Bool {})
	function setVibration(left:Float, right:Float, duration:Float):Bool;

	function getHat(hat:Float):JoystickHat;

	function isVibrationSupported():Bool;

	function getID():JoystickID;

	@:overload(function (axis:GamepadAxis):JoystickGamepadMapping {})
	function getGamepadMapping(button:GamepadButton):JoystickGamepadMapping;

	function getGamepadAxis(axis:GamepadAxis):Float;

	function getDeviceInfo():JoystickDeviceInfo;

	function getButtonCount():Float;

	function getGUID():String;

	function getAxisCount():Float;

	function getAxis(axis:Float):Float;

	function new():Void;

	function isGamepad():Bool;

	function isDown(buttonN:Float):Bool;

	function getVibration():JoystickVibration;

	function getName():String;

	function isGamepadDown(buttonN:GamepadButton):Bool;

	function isConnected():Bool;

	function getHatCount():Float;

	function getGamepadMappingString():String;

	function getAxes():JoystickAxes;

}

@:multiReturn
extern class JoystickGamepadMapping {

	public var inputindex:Float;
	public var hatdirection:JoystickHat;
	public var inputtype:JoystickInputType;
}

@:multiReturn
extern class JoystickVibration {

	public var right:Float;
	public var left:Float;
}

@:multiReturn
extern class JoystickDeviceInfo {

	public var productVersion:Float;
	public var vendorID:Float;
	public var productID:Float;
}

@:native("love.joystick")
extern class JoystickModule {

	public static function getJoysticks():Table<Dynamic,Dynamic>;

	public static function getJoystickCount():Float;

	@:overload(function (filename:String):Void {})
	public static function loadGamepadMappings(mappings:String):Void;

	@:overload(function (filename:String):String {})
	public static function saveGamepadMappings():String;

	public static function getGamepadMappingString(guid:String):String;

	@:overload(function (guid:String, button:GamepadButton, inputtype:JoystickInputType, inputindex:Float, hatdir:JoystickHat):Bool {})
	public static function setGamepadMapping(guid:String, axis:GamepadAxis, inputtype:JoystickInputType, inputindex:Float, hatdir:JoystickHat):Bool;

}

@:multiReturn
extern class JoystickAxes {

	public var axisDir1:Float;
	public var axisDirN:Float;
	public var axisDir2:Float;
}

extern enum GamepadButton {
	A;
	B;
	X;
	Y;
	BACK;
	GUIDE;
	START;
	LEFTSTICK;
	RIGHTSTICK;
	LEFTSHOULDER;
	RIGHTSHOULDER;
	DPUP;
	DPDOWN;
	DPLEFT;
	DPRIGHT;
}

extern enum JoystickHat {
	C;
	D;
	L;
	LD;
	LU;
	R;
	RD;
	RU;
	U;
}

extern enum GamepadAxis {
	LEFTX;
	LEFTY;
	RIGHTX;
	RIGHTY;
	TRIGGERLEFT;
	TRIGGERRIGHT;
}

extern enum JoystickInputType {
	AXIS;
	BUTTON;
	HAT;
}

