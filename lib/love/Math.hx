/*
 * This file was generated by the LOVE2D Haxe bindings generator for Love2D v11.5.
 * Do not modify this file directly.
 * 2024-05-12 19:31:28
 */

package love;

import lua.Table;
import lua.UserData;
import love.Data.CompressedData;
import love.Love2D.Object;
import love.Love2D.Data;

@:multiReturn
extern class MathRandomSeed {

	public var low:Float;
	public var high:Float;
}

@:multiReturn
extern class MathColorToBytesResult {

	public var rb:Float;
	public var gb:Float;
	public var bb:Float;
	public var ab:Float;
}

extern class RandomGenerator extends Object {

	function getSeed():RandomGeneratorSeed;

	function getState():String;

	@:overload(function ():Float {})
	@:overload(function (max:Float):Float {})
	function random(min:Float, max:Float):Float;

	function randomNormal(stddev:Float, mean:Float):Float;

	@:overload(function (seed:Float):Void {})
	function setSeed(low:Float, high:Float):Void;

	function setState(state:String):Void;

}

@:multiReturn
extern class BezierCurveControlPoint {

	public var x:Float;
	public var y:Float;
}

@:multiReturn
extern class MathGammaToLinearResult {

	public var lr:Float;
	public var lg:Float;
	public var lb:Float;
}

@:native("love.math")
extern class MathModule {

	public static function colorFromBytes(rb:Float, gb:Float, bb:Float, ab:Float):MathColorFromBytesResult;

	public static function colorToBytes(r:Float, g:Float, b:Float, a:Float):MathColorToBytesResult;

	@:overload(function (rawstring:String, format:Dynamic, level:Float):CompressedData {})
	public static function compress(data:Data, format:Dynamic, level:Float):CompressedData;

	@:overload(function (compressedData:CompressedData):String {})
	@:overload(function (compressedstring:String, format:Dynamic):String {})
	public static function decompress(data:Data, format:Dynamic):String;

	@:overload(function (r:Float, g:Float, b:Float):MathGammaToLinearResult {})
	@:overload(function (color:Table<Dynamic,Dynamic>):MathGammaToLinearResult {})
	public static function gammaToLinear(c:Float):Float;

	public static function getRandomSeed():MathRandomSeed;

	public static function getRandomState():String;

	@:overload(function (vertices:Table<Dynamic,Dynamic>):Bool {})
	public static function isConvex(x1:Float, y1:Float, x2:Float, y2:Float, x3:Float, y3:Float):Bool;

	@:overload(function (lr:Float, lg:Float, lb:Float):MathLinearToGammaResult {})
	@:overload(function (color:Table<Dynamic,Dynamic>):MathLinearToGammaResult {})
	public static function linearToGamma(lc:Float):Float;

	@:overload(function (vertices:Table<Dynamic,Dynamic>):BezierCurve {})
	public static function newBezierCurve(x1:Float, y1:Float, x2:Float, y2:Float, x3:Float, y3:Float):BezierCurve;

	@:overload(function ():Dynamic {})
	@:overload(function (seed:Float):Dynamic {})
	public static function newRandomGenerator(low:Float, high:Float):Dynamic;

	@:overload(function ():Dynamic {})
	public static function newTransform(x:Float, y:Float, angle:Float, sx:Float, sy:Float, ox:Float, oy:Float, kx:Float, ky:Float):Dynamic;

	@:overload(function (x:Float):Float {})
	@:overload(function (x:Float, y:Float):Float {})
	@:overload(function (x:Float, y:Float, z:Float):Float {})
	public static function noise(x:Float, y:Float, z:Float, w:Float):Float;

	@:overload(function ():Float {})
	@:overload(function (max:Float):Float {})
	public static function random(min:Float, max:Float):Float;

	public static function randomNormal(stddev:Float, mean:Float):Float;

	@:overload(function (seed:Float):Void {})
	public static function setRandomSeed(low:Float, high:Float):Void;

	public static function setRandomState(state:String):Void;

	@:overload(function (polygon:Table<Dynamic,Dynamic>):Table<Dynamic,Dynamic> {})
	public static function triangulate(x1:Float, y1:Float, x2:Float, y2:Float, x3:Float, y3:Float):Table<Dynamic,Dynamic>;

}

extern class Transform extends Object {

	function apply(other:Dynamic):Dynamic;

	function clone():Dynamic;

	function getMatrix():TransformMatrix;

	function inverse():Dynamic;

	function inverseTransformPoint(localX:Float, localY:Float):TransformInverseTransformPointResult;

	function isAffine2DTransform():Bool;

	function reset():Dynamic;

	function rotate(angle:Float):Dynamic;

	function scale(sx:Float, sy:Float):Dynamic;

	@:overload(function (e1_1:Float, e1_2:Float, e1_3:Float, e1_4:Float, e2_1:Float, e2_2:Float, e2_3:Float, e2_4:Float, e3_1:Float, e3_2:Float, e3_3:Float, e3_4:Float, e4_1:Float, e4_2:Float, e4_3:Float, e4_4:Float):Dynamic {})
	@:overload(function (layout:MatrixLayout, e1_1:Float, e1_2:Float, e1_3:Float, e1_4:Float, e2_1:Float, e2_2:Float, e2_3:Float, e2_4:Float, e3_1:Float, e3_2:Float, e3_3:Float, e3_4:Float, e4_1:Float, e4_2:Float, e4_3:Float, e4_4:Float):Dynamic {})
	@:overload(function (layout:MatrixLayout, matrix:Table<Dynamic,Dynamic>):Dynamic {})
	function setMatrix(layout:MatrixLayout, matrix:Table<Dynamic,Dynamic>):Dynamic;

	function setTransformation(x:Float, y:Float, angle:Float, sx:Float, sy:Float, ox:Float, oy:Float, kx:Float, ky:Float):Dynamic;

	function shear(kx:Float, ky:Float):Dynamic;

	function transformPoint(globalX:Float, globalY:Float):TransformTransformPointResult;

	function translate(dx:Float, dy:Float):Dynamic;

}

@:multiReturn
extern class TransformTransformPointResult {

	public var localX:Float;
	public var localY:Float;
}

@:multiReturn
extern class TransformMatrix {

	public var e1_1:Float;
	public var e1_2:Float;
	public var e1_3:Float;
	public var e1_4:Float;
	public var e2_1:Float;
	public var e2_2:Float;
	public var e2_3:Float;
	public var e2_4:Float;
	public var e3_1:Float;
	public var e3_2:Float;
	public var e3_3:Float;
	public var e3_4:Float;
	public var e4_1:Float;
	public var e4_2:Float;
	public var e4_3:Float;
	public var e4_4:Float;
}

@:multiReturn
extern class RandomGeneratorSeed {

	public var low:Float;
	public var high:Float;
}

@:multiReturn
extern class BezierCurveEvaluateResult {

	public var x:Float;
	public var y:Float;
}

@:multiReturn
extern class MathLinearToGammaResult {

	public var cr:Float;
	public var cg:Float;
	public var cb:Float;
}

@:multiReturn
extern class TransformInverseTransformPointResult {

	public var globalX:Float;
	public var globalY:Float;
}

@:multiReturn
extern class MathColorFromBytesResult {

	public var r:Float;
	public var g:Float;
	public var b:Float;
	public var a:Float;
}

extern class BezierCurve extends Object {

	function evaluate(t:Float):BezierCurveEvaluateResult;

	function getControlPoint(i:Float):BezierCurveControlPoint;

	function getControlPointCount():Float;

	function getDegree():Float;

	function getDerivative():BezierCurve;

	function getSegment(startpoint:Float, endpoint:Float):BezierCurve;

	function insertControlPoint(x:Float, y:Float, i:Float):Void;

	function removeControlPoint(index:Float):Void;

	function render(depth:Float):Table<Dynamic,Dynamic>;

	function renderSegment(startpoint:Float, endpoint:Float, depth:Float):Table<Dynamic,Dynamic>;

	function rotate(angle:Float, ox:Float, oy:Float):Void;

	function scale(s:Float, ox:Float, oy:Float):Void;

	function setControlPoint(i:Float, x:Float, y:Float):Void;

	function translate(dx:Float, dy:Float):Void;

}

extern enum MatrixLayout {
	ROW;
	COLUMN;
}

