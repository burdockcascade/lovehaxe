/*
 * This file was generated by the LOVE2D Haxe bindings generator for Love2D v11.5.
 * Do not modify this file directly.
 * 2024-07-23 23:52:48
 */

package love2d;

import lua.Table;
import lua.UserData;
import love2d.Love.Data;
import love2d.FileSystem.FileData;

@:native("love.image")
extern class LoveImage {


	@:overload(function (filename:String):CompressedImageData {})
	public static function newCompressedData(fileData:FileData):CompressedImageData;

	@:overload(function (filename:String):Bool {})
	public static function isCompressed(fileData:FileData):Bool;

	@:overload(function (width:Float, height:Float):ImageData {})
	@:overload(function (width:Float, height:Float, format:Dynamic, data:String):ImageData {})
	@:overload(function (width:Float, height:Float, data:String):ImageData {})
	@:overload(function (filename:String):ImageData {})
	public static function newImageData(filedata:FileData):ImageData;

}

@:multiReturn
extern class ImageDataDimensions {

	public var height:Float;
	public var width:Float;

}

@:multiReturn
extern class ImageDataPixel {

	public var b:Float;
	public var r:Float;
	public var g:Float;
	public var a:Float;

}

extern class ImageData extends Data {


	function paste(source:ImageData, dx:Float, dy:Float, sx:Float, sy:Float, sw:Float, sh:Float):Void;

	function getFormat():Dynamic;

	function getDimensions():ImageDataDimensions;

	function new():Void;

	function getHeight():Float;

	@:overload(function (x:Float, y:Float, r:Float, g:Float, b:Float, a:Float):Void {})
	function setPixel(x:Float, y:Float, color:Table<Dynamic,Dynamic>):Void;

	function mapPixel(pixelFunction:Dynamic, x:Float, y:Float, width:Float, height:Float):Void;

	function getPixel(x:Float, y:Float):ImageDataPixel;

	function getWidth():Float;

	@:overload(function (format:Dynamic, filename:String):FileData {})
	@:overload(function (outFile:String):Void {})
	function encode(outFile:String, format:Dynamic):Void;

}

extern class CompressedImageData extends Data {


	function getFormat():Dynamic;

	@:overload(function ():CompressedImageDataDimensions {})
	function getDimensions(level:Float):CompressedImageDataDimensions;

	function new():Void;

	function getMipmapCount():Float;

	@:overload(function ():Float {})
	function getHeight(level:Float):Float;

	@:overload(function ():Float {})
	function getWidth(level:Float):Float;

}

@:multiReturn
extern class CompressedImageDataDimensions {

	public var height:Float;
	public var width:Float;

}

extern enum CompressedImageFormat {
	DXT1;
	DXT3;
	DXT5;
	BC4;
	BC4S;
	BC5;
	BC5S;
	BC6H;
	BC6HS;
	BC7;
	ETC1;
	ETC2RGB;
	ETC2RGBA;
	ETC2RGBA1;
	EACR;
	EACRS;
	EACRG;
	EACRGS;
	PVR1RGB2;
	PVR1RGB4;
	PVR1RGBA2;
	PVR1RGBA4;
	ASTC4X4;
	ASTC5X4;
	ASTC5X5;
	ASTC6X5;
	ASTC6X6;
	ASTC8X5;
	ASTC8X6;
	ASTC8X8;
	ASTC10X5;
	ASTC10X6;
	ASTC10X8;
	ASTC10X10;
	ASTC12X10;
	ASTC12X12;
}

extern enum ImageFormat {
	TGA;
	PNG;
	JPG;
	BMP;
}

extern enum PixelFormat {
	UNKNOWN;
	NORMAL;
	HDR;
	R8;
	RG8;
	RGBA8;
	SRGBA8;
	R16;
	RG16;
	RGBA16;
	R16F;
	RG16F;
	RGBA16F;
	R32F;
	RG32F;
	RGBA32F;
	LA8;
	RGBA4;
	RGB5A1;
	RGB565;
	RGB10A2;
	RG11B10F;
	STENCIL8;
	DEPTH16;
	DEPTH24;
	DEPTH32F;
	DEPTH24STENCIL8;
	DEPTH32FSTENCIL8;
	DXT1;
	DXT3;
	DXT5;
	BC4;
	BC4S;
	BC5;
	BC5S;
	BC6H;
	BC6HS;
	BC7;
	ETC1;
	ETC2RGB;
	ETC2RGBA;
	ETC2RGBA1;
	EACR;
	EACRS;
	EACRG;
	EACRGS;
	PVR1RGB2;
	PVR1RGB4;
	PVR1RGBA2;
	PVR1RGBA4;
	ASTC4X4;
	ASTC5X4;
	ASTC5X5;
	ASTC6X5;
	ASTC6X6;
	ASTC8X5;
	ASTC8X6;
	ASTC8X8;
	ASTC10X5;
	ASTC10X6;
	ASTC10X8;
	ASTC10X10;
	ASTC12X10;
	ASTC12X12;
}

