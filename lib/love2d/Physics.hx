/*
 * This file was generated by the LOVE2D Haxe bindings generator for Love2D v11.5.
 * Do not modify this file directly.
 * 2024-07-24 00:05:11
 */

package love2d;

import lua.Table;
import lua.UserData;
import love2d.Love.Object;

@:multiReturn
extern class WorldGravity {

	public var y:Float;
	public var x:Float;

}

@:multiReturn
extern class WorldCallbacks {

	public var preSolve:Dynamic;
	public var postSolve:Dynamic;
	public var endContact:Dynamic;
	public var beginContact:Dynamic;

}

extern class World extends Object {


	function update(dt:Float, velocityiterations:Float, positioniterations:Float):Void;

	function translateOrigin(x:Float, y:Float):Void;

	function setSleepingAllowed(allow:Bool):Void;

	function setGravity(x:Float, y:Float):Void;

	function setContactFilter(filter:Dynamic):Void;

	function setCallbacks(beginContact:Dynamic, endContact:Dynamic, preSolve:Dynamic, postSolve:Dynamic):Void;

	function rayCast(x1:Float, y1:Float, x2:Float, y2:Float, callback:Dynamic):Void;

	function queryBoundingBox(topLeftX:Float, topLeftY:Float, bottomRightX:Float, bottomRightY:Float, callback:Dynamic):Void;

	function new():Void;

	function isSleepingAllowed():Bool;

	function isLocked():Bool;

	function isDestroyed():Bool;

	function getJoints():Table<Dynamic,Dynamic>;

	function getJointCount():Float;

	function getGravity():WorldGravity;

	function getContacts():Table<Dynamic,Dynamic>;

	function getContactFilter():Dynamic;

	function getContactCount():Float;

	function getCallbacks():WorldCallbacks;

	function getBodyCount():Float;

	function getBodies():Table<Dynamic,Dynamic>;

	function destroy():Void;

}

@:multiReturn
extern class WheelJointAxis {

	public var y:Float;
	public var x:Float;

}

extern class WheelJoint extends Joint {


	function setSpringFrequency(freq:Float):Void;

	function setSpringDampingRatio(ratio:Float):Void;

	function setMotorSpeed(speed:Float):Void;

	function setMotorEnabled(enable:Bool):Void;

	function setMaxMotorTorque(maxTorque:Float):Void;

	function new():Void;

	function isMotorEnabled():Bool;

	function getSpringFrequency():Float;

	function getSpringDampingRatio():Float;

	function getMotorTorque(invdt:Float):Float;

	function getMotorSpeed():Float;

	function getMaxMotorTorque():Float;

	function getJointTranslation():Float;

	function getJointSpeed():Float;

	function getAxis():WheelJointAxis;

}

extern class WeldJoint extends Joint {


	function setFrequency(freq:Float):Void;

	function setDampingRatio(ratio:Float):Void;

	function new():Void;

	function getReferenceAngle():Float;

	function getFrequency():Float;

	function getDampingRatio():Float;

}

@:multiReturn
extern class ShapeRayCastResult {

	public var yn:Float;
	public var xn:Float;
	public var fraction:Float;

}

@:multiReturn
extern class ShapeComputeMassResult {

	public var y:Float;
	public var x:Float;
	public var mass:Float;
	public var inertia:Float;

}

@:multiReturn
extern class ShapeComputeAABBResult {

	public var topLeftY:Float;
	public var topLeftX:Float;
	public var bottomRightY:Float;
	public var bottomRightX:Float;

}

extern class Shape extends Object {


	function testPoint(tx:Float, ty:Float, tr:Float, x:Float, y:Float):Bool;

	function rayCast(x1:Float, y1:Float, x2:Float, y2:Float, maxFraction:Float, tx:Float, ty:Float, tr:Float, childIndex:Float):ShapeRayCastResult;

	function new():Void;

	function getType():ShapeType;

	function getRadius():Float;

	function getChildCount():Float;

	function computeMass(density:Float):ShapeComputeMassResult;

	function computeAABB(tx:Float, ty:Float, tr:Float, childIndex:Float):ShapeComputeAABBResult;

}

extern class RopeJoint extends Joint {


	function setMaxLength(maxLength:Float):Void;

	function new():Void;

	function getMaxLength():Float;

}

@:multiReturn
extern class RevoluteJointLimits {

	public var upper:Float;
	public var lower:Float;

}

extern class RevoluteJoint extends Joint {


	function setUpperLimit(upper:Float):Void;

	function setMotorSpeed(s:Float):Void;

	function setMotorEnabled(enable:Bool):Void;

	function setMaxMotorTorque(f:Float):Void;

	function setLowerLimit(lower:Float):Void;

	function setLimitsEnabled(enable:Bool):Void;

	function setLimits(lower:Float, upper:Float):Void;

	function new():Void;

	function isMotorEnabled():Bool;

	function hasLimitsEnabled():Bool;

	function getUpperLimit():Float;

	function getReferenceAngle():Float;

	function getMotorTorque():Float;

	function getMotorSpeed():Float;

	function getMaxMotorTorque():Float;

	function getLowerLimit():Float;

	function getLimits():RevoluteJointLimits;

	function getJointSpeed():Float;

	function getJointAngle():Float;

	function areLimitsEnabled():Bool;

}

@:multiReturn
extern class PulleyJointMaxLengths {

	public var len2:Float;
	public var len1:Float;

}

@:multiReturn
extern class PulleyJointGroundAnchors {

	public var a2y:Float;
	public var a2x:Float;
	public var a1y:Float;
	public var a1x:Float;

}

extern class PulleyJoint extends Joint {


	function setRatio(ratio:Float):Void;

	function setMaxLengths(max1:Float, max2:Float):Void;

	function setConstant(length:Float):Void;

	function new():Void;

	function getRatio():Float;

	function getMaxLengths():PulleyJointMaxLengths;

	function getLengthB():Float;

	function getLengthA():Float;

	function getGroundAnchors():PulleyJointGroundAnchors;

	function getConstant():Float;

}

@:multiReturn
extern class PrismaticJointLimits {

	public var upper:Float;
	public var lower:Float;

}

@:multiReturn
extern class PrismaticJointAxis {

	public var y:Float;
	public var x:Float;

}

extern class PrismaticJoint extends Joint {


	function setUpperLimit(upper:Float):Void;

	function setMotorSpeed(s:Float):Void;

	function setMotorEnabled(enable:Bool):Void;

	function setMaxMotorForce(f:Float):Void;

	function setLowerLimit(lower:Float):Void;

	function setLimitsEnabled():Bool;

	function setLimits(lower:Float, upper:Float):Void;

	function new():Void;

	function isMotorEnabled():Bool;

	function getUpperLimit():Float;

	function getReferenceAngle():Float;

	function getMotorSpeed():Float;

	function getMotorForce(invdt:Float):Float;

	function getMaxMotorForce():Float;

	function getLowerLimit():Float;

	function getLimits():PrismaticJointLimits;

	function getJointTranslation():Float;

	function getJointSpeed():Float;

	function getAxis():PrismaticJointAxis;

	function areLimitsEnabled():Bool;

}

@:multiReturn
extern class PolygonShapePoints {

	public var y2:Float;
	public var y1:Float;
	public var x2:Float;
	public var x1:Float;

}

extern class PolygonShape extends Shape {


	function new():Void;

	function getPoints():PolygonShapePoints;

}

@:multiReturn
extern class PhysicsDistance {

	public var y2:Float;
	public var y1:Float;
	public var x2:Float;
	public var x1:Float;
	public var distance:Float;

}

@:multiReturn
extern class MouseJointTarget {

	public var y:Float;
	public var x:Float;

}

extern class MouseJoint extends Joint {


	function setTarget(x:Float, y:Float):Void;

	function setMaxForce(f:Float):Void;

	function setFrequency(freq:Float):Void;

	function setDampingRatio(ratio:Float):Void;

	function new():Void;

	function getTarget():MouseJointTarget;

	function getMaxForce():Float;

	function getFrequency():Float;

	function getDampingRatio():Float;

}

@:multiReturn
extern class MotorJointLinearOffset {

	public var y:Float;
	public var x:Float;

}

extern class MotorJoint extends Joint {


	function setLinearOffset(x:Float, y:Float):Void;

	function setAngularOffset(angleoffset:Float):Void;

	function new():Void;

	function getLinearOffset():MotorJointLinearOffset;

	function getAngularOffset():Float;

}

@:native("love.physics")
extern class LovePhysics {


	public static function setMeter(scale:Float):Void;

	public static function newWorld(xg:Float, yg:Float, sleep:Bool):Dynamic;

	@:overload(function (body1:Body, body2:Body, x:Float, y:Float, ax:Float, ay:Float, collideConnected:Bool):WheelJoint {})
	public static function newWheelJoint(body1:Body, body2:Body, x1:Float, y1:Float, x2:Float, y2:Float, ax:Float, ay:Float, collideConnected:Bool):WheelJoint;

	@:overload(function (body1:Body, body2:Body, x:Float, y:Float, collideConnected:Bool):WeldJoint {})
	@:overload(function (body1:Body, body2:Body, x1:Float, y1:Float, x2:Float, y2:Float, collideConnected:Bool):WeldJoint {})
	public static function newWeldJoint(body1:Body, body2:Body, x1:Float, y1:Float, x2:Float, y2:Float, collideConnected:Bool, referenceAngle:Float):WeldJoint;

	public static function newRopeJoint(body1:Body, body2:Body, x1:Float, y1:Float, x2:Float, y2:Float, maxLength:Float, collideConnected:Bool):RopeJoint;

	@:overload(function (body1:Body, body2:Body, x:Float, y:Float, collideConnected:Bool):RevoluteJoint {})
	public static function newRevoluteJoint(body1:Body, body2:Body, x1:Float, y1:Float, x2:Float, y2:Float, collideConnected:Bool, referenceAngle:Float):RevoluteJoint;

	@:overload(function (width:Float, height:Float):PolygonShape {})
	public static function newRectangleShape(x:Float, y:Float, width:Float, height:Float, angle:Float):PolygonShape;

	public static function newPulleyJoint(body1:Body, body2:Body, gx1:Float, gy1:Float, gx2:Float, gy2:Float, x1:Float, y1:Float, x2:Float, y2:Float, ratio:Float, collideConnected:Bool):PulleyJoint;

	@:overload(function (body1:Body, body2:Body, x:Float, y:Float, ax:Float, ay:Float, collideConnected:Bool):PrismaticJoint {})
	@:overload(function (body1:Body, body2:Body, x1:Float, y1:Float, x2:Float, y2:Float, ax:Float, ay:Float, collideConnected:Bool):PrismaticJoint {})
	public static function newPrismaticJoint(body1:Body, body2:Body, x1:Float, y1:Float, x2:Float, y2:Float, ax:Float, ay:Float, collideConnected:Bool, referenceAngle:Float):PrismaticJoint;

	@:overload(function (x1:Float, y1:Float, x2:Float, y2:Float, x3:Float, y3:Float, ...varargs:Float):PolygonShape {})
	public static function newPolygonShape(vertices:Table<Dynamic,Dynamic>):PolygonShape;

	public static function newMouseJoint(body:Body, x:Float, y:Float):MouseJoint;

	@:overload(function (body1:Body, body2:Body, correctionFactor:Float):Dynamic {})
	public static function newMotorJoint(body1:Body, body2:Body, correctionFactor:Float, collideConnected:Bool):Dynamic;

	public static function newGearJoint(joint1:Joint, joint2:Joint, ratio:Float, collideConnected:Bool):GearJoint;

	@:overload(function (body1:Body, body2:Body, x:Float, y:Float, collideConnected:Bool):FrictionJoint {})
	public static function newFrictionJoint(body1:Body, body2:Body, x1:Float, y1:Float, x2:Float, y2:Float, collideConnected:Bool):FrictionJoint;

	public static function newFixture(body:Body, shape:Shape, density:Float):Fixture;

	public static function newEdgeShape(x1:Float, y1:Float, x2:Float, y2:Float):EdgeShape;

	public static function newDistanceJoint(body1:Body, body2:Body, x1:Float, y1:Float, x2:Float, y2:Float, collideConnected:Bool):DistanceJoint;

	@:overload(function (radius:Float):CircleShape {})
	public static function newCircleShape(x:Float, y:Float, radius:Float):CircleShape;

	@:overload(function (loop:Bool, x1:Float, y1:Float, x2:Float, y2:Float, ...varargs:Float):ChainShape {})
	public static function newChainShape(loop:Bool, points:Table<Dynamic,Dynamic>):ChainShape;

	public static function newBody(world:Dynamic, x:Float, y:Float, type:BodyType):Body;

	public static function getMeter():Float;

	public static function getDistance(fixture1:Fixture, fixture2:Fixture):PhysicsDistance;

}

@:multiReturn
extern class JointReactionForce {

	public var y:Float;
	public var x:Float;

}

@:multiReturn
extern class JointBodies {

	public var bodyB:Body;
	public var bodyA:Body;

}

@:multiReturn
extern class JointAnchors {

	public var y2:Float;
	public var y1:Float;
	public var x2:Float;
	public var x1:Float;

}

extern class Joint extends Object {


	function setUserData(value:Dynamic):Void;

	function new():Void;

	function isDestroyed():Bool;

	function getUserData():Dynamic;

	function getType():JointType;

	function getReactionTorque(invdt:Float):Float;

	function getReactionForce(x:Float):JointReactionForce;

	function getCollideConnected():Bool;

	function getBodies():JointBodies;

	function getAnchors():JointAnchors;

	function destroy():Void;

}

@:multiReturn
extern class GearJointJoints {

	public var joint2:Joint;
	public var joint1:Joint;

}

extern class GearJoint extends Joint {


	function setRatio(ratio:Float):Void;

	function new():Void;

	function getRatio():Float;

	function getJoints():GearJointJoints;

}

extern class FrictionJoint extends Joint {


	function setMaxTorque(torque:Float):Void;

	function setMaxForce(maxForce:Float):Void;

	function new():Void;

	function getMaxTorque():Float;

	function getMaxForce():Float;

}

@:multiReturn
extern class FixtureRayCastResult {

	public var yn:Float;
	public var xn:Float;
	public var fraction:Float;

}

@:multiReturn
extern class FixtureMassData {

	public var y:Float;
	public var x:Float;
	public var mass:Float;
	public var inertia:Float;

}

@:multiReturn
extern class FixtureFilterData {

	public var mask:Float;
	public var group:Float;
	public var categories:Float;

}

@:multiReturn
extern class FixtureBoundingBox {

	public var topLeftY:Float;
	public var topLeftX:Float;
	public var bottomRightY:Float;
	public var bottomRightX:Float;

}

extern class Fixture extends Object {


	function testPoint(x:Float, y:Float):Bool;

	function setUserData(value:Dynamic):Void;

	function setSensor(sensor:Bool):Void;

	function setRestitution(restitution:Float):Void;

	function setMask(...varargs:Float):Void;

	function setGroupIndex(group:Float):Void;

	function setFriction(friction:Float):Void;

	function setFilterData(categories:Float, mask:Float, group:Float):Void;

	function setDensity(density:Float):Void;

	function setCategory(...varargs:Float):Void;

	function rayCast(x1:Float, y1:Float, x2:Float, y2:Float, maxFraction:Float, childIndex:Float):FixtureRayCastResult;

	function new():Void;

	function isSensor():Bool;

	function isDestroyed():Bool;

	function getUserData():Dynamic;

	function getShape():Shape;

	function getRestitution():Float;

	function getMassData():FixtureMassData;

	function getMask():Float;

	function getGroupIndex():Float;

	function getFriction():Float;

	function getFilterData():FixtureFilterData;

	function getDensity():Float;

	function getCategory():Float;

	function getBoundingBox(index:Float):FixtureBoundingBox;

	function getBody():Body;

	function destroy():Void;

}

@:multiReturn
extern class EdgeShapePreviousVertex {

	public var y:Float;
	public var x:Float;

}

@:multiReturn
extern class EdgeShapePoints {

	public var y2:Float;
	public var y1:Float;
	public var x2:Float;
	public var x1:Float;

}

@:multiReturn
extern class EdgeShapeNextVertex {

	public var y:Float;
	public var x:Float;

}

extern class EdgeShape extends Shape {


	function setPreviousVertex(x:Float, y:Float):Void;

	function setNextVertex(x:Float, y:Float):Void;

	function new():Void;

	function getPreviousVertex():EdgeShapePreviousVertex;

	function getPoints():EdgeShapePoints;

	function getNextVertex():EdgeShapeNextVertex;

}

extern class DistanceJoint extends Joint {


	function setLength(l:Float):Void;

	function setFrequency(Hz:Float):Void;

	function setDampingRatio(ratio:Float):Void;

	function new():Void;

	function getLength():Float;

	function getFrequency():Float;

	function getDampingRatio():Float;

}

@:multiReturn
extern class ContactPositions {

	public var y2:Float;
	public var y1:Float;
	public var x2:Float;
	public var x1:Float;

}

@:multiReturn
extern class ContactNormal {

	public var ny:Float;
	public var nx:Float;

}

@:multiReturn
extern class ContactFixtures {

	public var fixtureB:Fixture;
	public var fixtureA:Fixture;

}

@:multiReturn
extern class ContactChildren {

	public var indexB:Float;
	public var indexA:Float;

}

extern class Contact extends Object {


	function setRestitution(restitution:Float):Void;

	function setFriction(friction:Float):Void;

	function setEnabled(enabled:Bool):Void;

	function resetRestitution():Void;

	function resetFriction():Void;

	function new():Void;

	function isTouching():Bool;

	function isEnabled():Bool;

	function getRestitution():Float;

	function getPositions():ContactPositions;

	function getNormal():ContactNormal;

	function getFriction():Float;

	function getFixtures():ContactFixtures;

	function getChildren():ContactChildren;

}

@:multiReturn
extern class CircleShapePoint {

	public var y:Float;
	public var x:Float;

}

extern class CircleShape extends Shape {


	function setRadius(radius:Float):Void;

	function setPoint(x:Float, y:Float):Void;

	function new():Void;

	function getRadius():Float;

	function getPoint():CircleShapePoint;

}

@:multiReturn
extern class ChainShapePreviousVertex {

	public var y:Float;
	public var x:Float;

}

@:multiReturn
extern class ChainShapePoints {

	public var y2:Float;
	public var y1:Float;
	public var x2:Float;
	public var x1:Float;

}

@:multiReturn
extern class ChainShapePoint {

	public var y:Float;
	public var x:Float;

}

@:multiReturn
extern class ChainShapeNextVertex {

	public var y:Float;
	public var x:Float;

}

extern class ChainShape extends Shape {


	function setPreviousVertex(x:Float, y:Float):Void;

	function setNextVertex(x:Float, y:Float):Void;

	function new():Void;

	function getVertexCount():Float;

	function getPreviousVertex():ChainShapePreviousVertex;

	function getPoints():ChainShapePoints;

	function getPoint(index:Float):ChainShapePoint;

	function getNextVertex():ChainShapeNextVertex;

	function getChildEdge(index:Float):EdgeShape;

}

@:multiReturn
extern class BodyWorldVector {

	public var worldY:Float;
	public var worldX:Float;

}

@:multiReturn
extern class BodyWorldPoints {

	public var y2:Float;
	public var y1:Float;
	public var x2:Float;
	public var x1:Float;

}

@:multiReturn
extern class BodyWorldPoint {

	public var worldY:Float;
	public var worldX:Float;

}

@:multiReturn
extern class BodyWorldCenter {

	public var y:Float;
	public var x:Float;

}

@:multiReturn
extern class BodyTransform {

	public var y:Float;
	public var x:Float;
	public var angle:Float;

}

@:multiReturn
extern class BodyPosition {

	public var y:Float;
	public var x:Float;

}

@:multiReturn
extern class BodyMassData {

	public var y:Float;
	public var x:Float;
	public var mass:Float;
	public var inertia:Float;

}

@:multiReturn
extern class BodyLocalVector {

	public var localY:Float;
	public var localX:Float;

}

@:multiReturn
extern class BodyLocalPoint {

	public var localY:Float;
	public var localX:Float;

}

@:multiReturn
extern class BodyLocalCenter {

	public var y:Float;
	public var x:Float;

}

@:multiReturn
extern class BodyLinearVelocityFromWorldPoint {

	public var vy:Float;
	public var vx:Float;

}

@:multiReturn
extern class BodyLinearVelocityFromLocalPoint {

	public var vy:Float;
	public var vx:Float;

}

@:multiReturn
extern class BodyLinearVelocity {

	public var y:Float;
	public var x:Float;

}

extern class Body extends Object {


	function setY(y:Float):Void;

	function setX(x:Float):Void;

	function setUserData(value:Dynamic):Void;

	function setType(type:BodyType):Void;

	function setTransform(x:Float, y:Float, angle:Float):Void;

	function setSleepingAllowed(allowed:Bool):Void;

	function setPosition(x:Float, y:Float):Void;

	function setMassData(x:Float, y:Float, mass:Float, inertia:Float):Void;

	function setMass(mass:Float):Void;

	function setLinearVelocity(x:Float, y:Float):Void;

	function setLinearDamping(ld:Float):Void;

	function setInertia(inertia:Float):Void;

	function setGravityScale(scale:Float):Void;

	function setFixedRotation(isFixed:Bool):Void;

	function setBullet(status:Bool):Void;

	function setAwake(awake:Bool):Void;

	function setAngularVelocity(w:Float):Void;

	function setAngularDamping(damping:Float):Void;

	function setAngle(angle:Float):Void;

	function setActive(active:Bool):Void;

	function resetMassData():Void;

	function new():Void;

	function isTouching(otherbody:Body):Bool;

	function isSleepingAllowed():Bool;

	function isFixedRotation():Bool;

	function isDestroyed():Bool;

	function isBullet():Bool;

	function isAwake():Bool;

	function isActive():Bool;

	function getY():Float;

	function getX():Float;

	function getWorldVector(localX:Float, localY:Float):BodyWorldVector;

	function getWorldPoints(x1:Float, y1:Float, x2:Float, y2:Float):BodyWorldPoints;

	function getWorldPoint(localX:Float, localY:Float):BodyWorldPoint;

	function getWorldCenter():BodyWorldCenter;

	function getWorld():Dynamic;

	function getUserData():Dynamic;

	function getType():BodyType;

	function getTransform():BodyTransform;

	function getPosition():BodyPosition;

	function getMassData():BodyMassData;

	function getMass():Float;

	function getLocalVector(worldX:Float, worldY:Float):BodyLocalVector;

	function getLocalPoints(x1:Float, y1:Float, x2:Float, y2:Float, ...varargs:Float):Array<Dynamic>;

	function getLocalPoint(worldX:Float, worldY:Float):BodyLocalPoint;

	function getLocalCenter():BodyLocalCenter;

	function getLinearVelocityFromWorldPoint(x:Float, y:Float):BodyLinearVelocityFromWorldPoint;

	function getLinearVelocityFromLocalPoint(x:Float, y:Float):BodyLinearVelocityFromLocalPoint;

	function getLinearVelocity():BodyLinearVelocity;

	function getLinearDamping():Float;

	function getJoints():Table<Dynamic,Dynamic>;

	function getInertia():Float;

	function getGravityScale():Float;

	function getFixtures():Table<Dynamic,Dynamic>;

	function getContacts():Table<Dynamic,Dynamic>;

	function getAngularVelocity():Float;

	function getAngularDamping():Float;

	function getAngle():Float;

	function destroy():Void;

	function applyTorque(torque:Float):Void;

	@:overload(function (ix:Float, iy:Float):Void {})
	function applyLinearImpulse(ix:Float, iy:Float, x:Float, y:Float):Void;

	@:overload(function (fx:Float, fy:Float):Void {})
	function applyForce(fx:Float, fy:Float, x:Float, y:Float):Void;

	function applyAngularImpulse(impulse:Float):Void;

}

extern enum ShapeType {
	CIRCLE;
	POLYGON;
	EDGE;
	CHAIN;
}

extern enum JointType {
	DISTANCE;
	FRICTION;
	GEAR;
	MOUSE;
	PRISMATIC;
	PULLEY;
	REVOLUTE;
	ROPE;
	WELD;
}

extern enum BodyType {
	STATIC;
	DYNAMIC;
	KINEMATIC;
}

