/*
 * This file was generated by the LOVE2D Haxe bindings generator for Love2D v11.5.
 * Do not modify this file directly.
 * 2024-07-24 00:28:14
 */

package love2d;

import lua.Table;
import lua.UserData;
import love2d.Sound.SoundData;
import love2d.Love.Object;
import love2d.FileSystem.FileData;
import love2d.FileSystem.File;
import love2d.Sound.Decoder;

@:multiReturn
extern class SourceVolumeLimits {

	public var min:Float;
	public var max:Float;

}

@:multiReturn
extern class SourceVelocity {

	public var z:Float;
	public var y:Float;
	public var x:Float;

}

@:multiReturn
extern class SourcePosition {

	public var z:Float;
	public var y:Float;
	public var x:Float;

}

@:multiReturn
extern class SourceDirection {

	public var z:Float;
	public var y:Float;
	public var x:Float;

}

@:multiReturn
extern class SourceCone {

	public var outerVolume:Float;
	public var outerAngle:Float;
	public var innerAngle:Float;

}

@:multiReturn
extern class SourceAttenuationDistances {

	public var ref:Float;
	public var max:Float;

}

extern class Source extends Object {


	function tell(unit:TimeUnit):Float;

	function stop():Void;

	function setVolumeLimits(min:Float, max:Float):Void;

	function setVolume(volume:Float):Void;

	function setVelocity(x:Float, y:Float, z:Float):Void;

	function setRolloff(rolloff:Float):Void;

	function setRelative(enable:Bool):Void;

	function setPosition(x:Float, y:Float, z:Float):Void;

	function setPitch(pitch:Float):Void;

	function setLooping(loop:Bool):Void;

	@:overload(function (settings:Table<Dynamic,Dynamic>):Bool {})
	function setFilter():Void;

	@:overload(function (name:String, enable:Bool):Bool {})
	function setEffect(name:String, filtersettings:Table<Dynamic,Dynamic>):Bool;

	function setDirection(x:Float, y:Float, z:Float):Void;

	function setCone(innerAngle:Float, outerAngle:Float, outerVolume:Float):Void;

	function setAttenuationDistances(ref:Float, max:Float):Void;

	function setAirAbsorption(amount:Float):Void;

	function seek(offset:Float, unit:TimeUnit):Void;

	function queue(sounddata:SoundData):Bool;

	function play():Bool;

	function pause():Void;

	function new():Void;

	function isRelative():Bool;

	function isPlaying():Bool;

	function isLooping():Bool;

	function getVolumeLimits():SourceVolumeLimits;

	function getVolume():Float;

	function getVelocity():SourceVelocity;

	function getType():SourceType;

	function getRolloff():Float;

	function getPosition():SourcePosition;

	function getPitch():Float;

	function getFreeBufferCount():Float;

	function getFilter():Table<Dynamic,Dynamic>;

	function getEffect(name:String, filtersettings:Table<Dynamic,Dynamic>):Table<Dynamic,Dynamic>;

	function getDuration(unit:TimeUnit):Float;

	function getDirection():SourceDirection;

	function getCone():SourceCone;

	function getChannelCount():Float;

	function getAttenuationDistances():SourceAttenuationDistances;

	function getAirAbsorption():Float;

	function getActiveEffects():Table<Dynamic,Dynamic>;

	function clone():Source;

}

extern class RecordingDevice extends Object {


	function stop():SoundData;

	function start(samplecount:Float, samplerate:Float, bitdepth:Float, channels:Float):Bool;

	function new():Void;

	function isRecording():Bool;

	function getSampleRate():Float;

	function getSampleCount():Float;

	function getName():String;

	function getData():SoundData;

	function getChannelCount():Float;

	function getBitDepth():Float;

}

@:native("love.audio")
extern class LoveAudio {


	@:overload(function ():Void {})
	@:overload(function (source:Source):Void {})
	@:overload(function (source1:Source, source2:Source, ...varargs:Source):Void {})
	public static function stop(sources:Table<Dynamic,Dynamic>):Void;

	public static function setVolume(volume:Float):Void;

	public static function setVelocity(x:Float, y:Float, z:Float):Void;

	public static function setPosition(x:Float, y:Float, z:Float):Void;

	public static function setOrientation(fx, fy, fz:Float, ux, uy, uz:Float):Void;

	public static function setMixWithSystem(mix:Bool):Bool;

	@:overload(function (name:String, settings:Table<Dynamic,Dynamic>):Bool {})
	public static function setEffect(name:String, enabled:Bool):Bool;

	public static function setDopplerScale(scale:Float):Void;

	public static function setDistanceModel(model:DistanceModel):Void;

	@:overload(function (source:Source):Void {})
	@:overload(function (sources:Table<Dynamic,Dynamic>):Void {})
	public static function play(source1:Source, source2:Source, ...varargs:Source):Void;

	@:overload(function ():Table<Dynamic,Dynamic> {})
	@:overload(function (source:Source, ...varargs:Source):Void {})
	public static function pause(sources:Table<Dynamic,Dynamic>):Void;

	@:overload(function (filename:String, type:SourceType):Source {})
	@:overload(function (file:File, type:SourceType):Source {})
	@:overload(function (decoder:Decoder, type:SourceType):Source {})
	@:overload(function (data:FileData, type:SourceType):Source {})
	public static function newSource(data:SoundData):Source;

	public static function newQueueableSource(samplerate:Float, bitdepth:Float, channels:Float, buffercount:Float):Source;

	public static function isEffectsSupported():Bool;

	public static function getVolume():Float;

	public static function getVelocity():AudioVelocity;

	public static function getRecordingDevices():Table<Dynamic,Dynamic>;

	public static function getPosition():AudioPosition;

	public static function getOrientation():AudioOrientation;

	public static function getMaxSourceEffects():Float;

	public static function getMaxSceneEffects():Float;

	public static function getEffect(name:String):Table<Dynamic,Dynamic>;

	public static function getDopplerScale():Float;

	public static function getDistanceModel():DistanceModel;

	public static function getActiveSourceCount():Float;

	public static function getActiveEffects():Table<Dynamic,Dynamic>;

}

@:multiReturn
extern class AudioVelocity {

	public var z:Float;
	public var y:Float;
	public var x:Float;

}

@:multiReturn
extern class AudioPosition {

	public var z:Float;
	public var y:Float;
	public var x:Float;

}

@:multiReturn
extern class AudioOrientation {

	public var ux, uy, uz:Float;
	public var fx, fy, fz:Float;

}

extern enum TimeUnit {
	SECONDS;
	SAMPLES;
}

extern enum SourceType {
	STATIC;
	STREAM;
	QUEUE;
}

extern enum FilterType {
	LOWPASS;
	HIGHPASS;
	BANDPASS;
}

extern enum EffectWaveform {
	SAWTOOTH;
	SINE;
	SQUARE;
	TRIANGLE;
}

extern enum EffectType {
	CHORUS;
	COMPRESSOR;
	DISTORTION;
	ECHO;
	EQUALIZER;
	FLANGER;
	REVERB;
	RINGMODULATOR;
}

extern enum DistanceModel {
	NONE;
	INVERSE;
	INVERSECLAMPED;
	LINEAR;
	LINEARCLAMPED;
	EXPONENT;
	EXPONENTCLAMPED;
}

