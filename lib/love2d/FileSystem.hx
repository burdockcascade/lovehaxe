/*
 * This file was generated by the LOVE2D Haxe bindings generator for Love2D v11.5.
 * Do not modify this file directly.
 * 2024-07-24 00:28:14
 */

package love2d;

import lua.Table;
import lua.UserData;
import love2d.Love.Object;
import love2d.Love.Data;
import love2d.Data.ContainerType;

@:native("love.filesystem")
extern class LoveFileSystem {


	@:overload(function (name:String, data:String, size:Float):FileSystemWriteResult {})
	public static function write(name:String, data:Data, size:Float):FileSystemWriteResult;

	public static function unmount(archive:String):Bool;

	public static function setSymlinksEnabled(enable:Bool):Void;

	public static function setSource(path:String):Void;

	public static function setRequirePath(paths:String):Void;

	@:overload(function (name:String):Void {})
	public static function setIdentity(name:String):Void;

	public static function setCRequirePath(paths:String):Void;

	public static function remove(name:String):Bool;

	@:overload(function (name:String, size:Float):FileSystemReadResult {})
	public static function read(container:ContainerType, name:String, size:Float):FileSystemReadResult;

	@:overload(function (contents:String, name:String):FileData {})
	@:overload(function (originaldata:Data, name:String):FileData {})
	public static function newFileData(filepath:String):FileSystemNewFileDataResult;

	@:overload(function (filename:String):File {})
	public static function newFile(filename:String, mode:FileMode):FileSystemNewFileResult;

	@:overload(function (archive:String, mountpoint:String, appendToPath:Bool):Bool {})
	@:overload(function (filedata:FileData, mountpoint:String, appendToPath:Bool):Bool {})
	public static function mount(data:Data, archivename:String, mountpoint:String, appendToPath:Bool):Bool;

	public static function load(name:String):FileSystemLoadResult;

	public static function lines(name:String):Dynamic;

	public static function isFused():Bool;

	public static function init(appname:String):Void;

	public static function getWorkingDirectory():String;

	public static function getUserDirectory():String;

	public static function getSourceBaseDirectory():String;

	public static function getSource():String;

	public static function getSaveDirectory():String;

	public static function getRequirePath():String;

	public static function getRealDirectory(filepath:String):String;

	@:overload(function (path:String, filtertype:FileType):Table<Dynamic,Dynamic> {})
	@:overload(function (path:String, info:Table<Dynamic,Dynamic>):Table<Dynamic,Dynamic> {})
	public static function getInfo(path:String, filtertype:FileType, info:Table<Dynamic,Dynamic>):Table<Dynamic,Dynamic>;

	public static function getIdentity():String;

	@:overload(function (dir:String):Table<Dynamic,Dynamic> {})
	public static function getDirectoryItems(dir:String, callback:Dynamic):Table<Dynamic,Dynamic>;

	public static function getCRequirePath():String;

	public static function getAppdataDirectory():String;

	public static function createDirectory(name:String):Bool;

	public static function areSymlinksEnabled():Bool;

	@:overload(function (name:String, data:String, size:Float):FileSystemAppendResult {})
	public static function append(name:String, data:Data, size:Float):FileSystemAppendResult;

}

@:multiReturn
extern class FileWriteResult {

	public var success:Bool;
	public var errorstr:String;

}

@:multiReturn
extern class FileSystemWriteResult {

	public var success:Bool;
	public var message:String;

}

@:multiReturn
extern class FileSystemReadResult {

	public var size:Float;
	public var error:String;
	public var contents:Dynamic;

}

@:multiReturn
extern class FileSystemNewFileResult {

	public var file:File;
	public var errorstr:String;

}

@:multiReturn
extern class FileSystemNewFileDataResult {

	public var err:String;
	public var data:FileData;

}

@:multiReturn
extern class FileSystemLoadResult {

	public var errormsg:String;
	public var chunk:Dynamic;

}

@:multiReturn
extern class FileSystemAppendResult {

	public var success:Bool;
	public var errormsg:String;

}

@:multiReturn
extern class FileSetBufferResult {

	public var success:Bool;
	public var errorstr:String;

}

@:multiReturn
extern class FileReadResult {

	public var size:Float;
	public var contents:Dynamic;

}

@:multiReturn
extern class FileOpenResult {

	public var ok:Bool;
	public var err:String;

}

@:multiReturn
extern class FileFlushResult {

	public var success:Bool;
	public var err:String;

}

extern class FileData extends Data {


	function new():Void;

	function getFilename():String;

	function getExtension():String;

}

@:multiReturn
extern class FileBuffer {

	public var size:Float;
	public var mode:BufferMode;

}

extern class File extends Object {


	@:overload(function (data:String, size:Float):FileWriteResult {})
	function write(data:Data, size:Float):FileWriteResult;

	function tell():Float;

	function setBuffer(mode:BufferMode, size:Float):FileSetBufferResult;

	function seek(pos:Float):Bool;

	@:overload(function (bytes:Float):FileReadResult {})
	function read(container:ContainerType, bytes:Float):FileReadResult;

	function open(mode:FileMode):FileOpenResult;

	function new():Void;

	function lines():Dynamic;

	function isOpen():Bool;

	function isEOF():Bool;

	function getSize():Float;

	function getMode():FileMode;

	function getFilename():String;

	function getBuffer():FileBuffer;

	function flush():FileFlushResult;

	function close():Bool;

}

extern class DroppedFile extends File {


	function new():Void;

}

extern enum FileType {
	FILE;
	DIRECTORY;
	SYMLINK;
	OTHER;
}

extern enum FileMode {
	R;
	W;
	A;
	C;
}

extern enum FileDecoder {
	FILE;
	BASE64;
}

extern enum BufferMode {
	NONE;
	LINE;
	FULL;
}

