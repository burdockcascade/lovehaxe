// DO NOT EDIT THIS FILE
// GENERATED ON 2024-05-04 09:34:57

package love;

import lua.Table;
@:native("love.image")
extern class Image {

	@:overload
	public static function isCompressed(filename:String): Bool;

	@:overload
	public static function isCompressed(fileData:FileData): Bool;

	@:overload
	public static function newCompressedData(filename:String): CompressedImageData;

	@:overload
	public static function newCompressedData(fileData:FileData): CompressedImageData;

	@:overload
	public static function newImageData(width:Float, height:Float): ImageData;

	@:overload
	public static function newImageData(width:Float, height:Float, format:PixelFormat = 'rgba8', data:String = nil): ImageData;

	@:overload
	public static function newImageData(width:Float, height:Float, data:String): ImageData;

	@:overload
	public static function newImageData(filename:String): ImageData;

	@:overload
	public static function newImageData(filedata:FileData): ImageData;

}

extern class CompressedImageData extends Data {

	@:overload
	public static function getDimensions(): Dimensions;

	@:overload
	public static function getDimensions(level:Float): Dimensions;

	public static function getFormat(): CompressedImageFormat;

	@:overload
	public static function getHeight(): Float;

	@:overload
	public static function getHeight(level:Float): Float;

	public static function getMipmapCount(): Float;

	@:overload
	public static function getWidth(): Float;

	@:overload
	public static function getWidth(level:Float): Float;

}

extern class ImageData extends Data {

	@:overload
	public static function encode(format:ImageFormat, filename:String = nil): FileData;

	@:overload
	public static function encode(outFile:String): Void;

	@:overload
	public static function encode(outFile:String, format:ImageFormat): Void;

	public static function getDimensions(): Dimensions;

	public static function getHeight(): Float;

	public static function getPixel(x:Float, y:Float): Pixel;

	public static function getWidth(): Float;

	public static function mapPixel(pixelFunction:Dynamic, x:Float = 0, y:Float = 0, width:Float = ImageData:getWidth(), height:Float = ImageData:getHeight()): Void;

	public static function paste(source:ImageData, dx:Float, dy:Float, sx:Float, sy:Float, sw:Float, sh:Float): Void;

	public static function setPixel(x:Float, y:Float, r:Float, g:Float, b:Float, a:Float): Void;

	public static function getFormat(): PixelFormat;

}

enum CompressedImageFormat {
	DXT1;
	DXT3;
	DXT5;
	BC4;
	BC4s;
	BC5;
	BC5s;
	BC6h;
	BC6hs;
	BC7;
	ETC1;
	ETC2rgb;
	ETC2rgba;
	ETC2rgba1;
	EACr;
	EACrs;
	EACrg;
	EACrgs;
	PVR1rgb2;
	PVR1rgb4;
	PVR1rgba2;
	PVR1rgba4;
	ASTC4x4;
	ASTC5x4;
	ASTC5x5;
	ASTC6x5;
	ASTC6x6;
	ASTC8x5;
	ASTC8x6;
	ASTC8x8;
	ASTC10x5;
	ASTC10x6;
	ASTC10x8;
	ASTC10x10;
	ASTC12x10;
	ASTC12x12;
}

enum ImageFormat {
	Tga;
	Png;
	Jpg;
	Bmp;
}

enum PixelFormat {
	Unknown;
	Normal;
	Hdr;
	R8;
	Rg8;
	Rgba8;
	Srgba8;
	R16;
	Rg16;
	Rgba16;
	R16f;
	Rg16f;
	Rgba16f;
	R32f;
	Rg32f;
	Rgba32f;
	La8;
	Rgba4;
	Rgb5a1;
	Rgb565;
	Rgb10a2;
	Rg11b10f;
	Stencil8;
	Depth16;
	Depth24;
	Depth32f;
	Depth24stencil8;
	Depth32fstencil8;
	DXT1;
	DXT3;
	DXT5;
	BC4;
	BC4s;
	BC5;
	BC5s;
	BC6h;
	BC6hs;
	BC7;
	ETC1;
	ETC2rgb;
	ETC2rgba;
	ETC2rgba1;
	EACr;
	EACrs;
	EACrg;
	EACrgs;
	PVR1rgb2;
	PVR1rgb4;
	PVR1rgba2;
	PVR1rgba4;
	ASTC4x4;
	ASTC5x4;
	ASTC5x5;
	ASTC6x5;
	ASTC6x6;
	ASTC8x5;
	ASTC8x6;
	ASTC8x8;
	ASTC10x5;
	ASTC10x6;
	ASTC10x8;
	ASTC10x10;
	ASTC12x10;
	ASTC12x12;
}

