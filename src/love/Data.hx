// DO NOT EDIT THIS FILE
// GENERATED ON 2024-05-04 09:34:57

package love;

import lua.Table;
@:native("love.data")
extern class Data {

	@:overload
	public static function compress(container:ContainerType, format:CompressedDataFormat, rawstring:String, level:Float = -1): CompressedData or string;

	@:overload
	public static function compress(container:ContainerType, format:CompressedDataFormat, data:Data, level:Float = -1): CompressedData or string;

	@:overload
	public static function decode(container:ContainerType, format:EncodeFormat, sourceString:String): ByteData or string;

	@:overload
	public static function decode(container:ContainerType, format:EncodeFormat, sourceData:Data): ByteData or string;

	@:overload
	public static function decompress(container:ContainerType, compressedData:CompressedData): Data or string;

	@:overload
	public static function decompress(container:ContainerType, format:CompressedDataFormat, compressedString:String): Data or string;

	@:overload
	public static function decompress(container:ContainerType, format:CompressedDataFormat, data:Data): Data or string;

	@:overload
	public static function encode(container:ContainerType, format:EncodeFormat, sourceString:String, linelength:Float = 0): ByteData or string;

	@:overload
	public static function encode(container:ContainerType, format:EncodeFormat, sourceData:Data, linelength:Float = 0): ByteData or string;

	public static function getPackedSize(format:String): Float;

	@:overload
	public static function hash(hashFunction:HashFunction, string:String): String;

	@:overload
	public static function hash(hashFunction:HashFunction, data:Data): String;

	@:overload
	public static function newByteData(datastring:String): ByteData;

	@:overload
	public static function newByteData(Data:Data, offset:Float = 0, size:Float = data:getSize()): ByteData;

	@:overload
	public static function newByteData(size:Float): ByteData;

	public static function newDataView(data:Data, offset:Float, size:Float): Data;

	public static function pack(container:ContainerType, format:String, v1:Number or boolean or string, ...:Number or boolean or string): Data or string;

	@:overload
	public static function unpack(format:String, datastring:String, pos:Float = 1): Unpack;

	@:overload
	public static function unpack(format:String, data:Data, pos:Float = 1): Unpack;

}

extern class Unpack {
	public var v1:Number or boolean or string;
	public var ...:Number or boolean or string;
	public var index:Float;
}

extern class Unpack {
	public var v1:Number or boolean or string;
	public var ...:Number or boolean or string;
	public var index:Float;
}

extern class ByteData extends Object {

}

extern class CompressedData extends Data {

	public static function getFormat(): CompressedDataFormat;

}

enum CompressedDataFormat {
	Lz4;
	Zlib;
	Gzip;
	Deflate;
}

enum ContainerType {
	Data;
	String;
}

enum EncodeFormat {
	Base64;
	Hex;
}

enum HashFunction {
	Md5;
	Sha1;
	Sha224;
	Sha256;
	Sha384;
	Sha512;
}

