// DO NOT EDIT THIS FILE
// GENERATED ON 2024-05-04 00:10:54

package love.window;

import haxe.extern.Rest;
import lua.Table;
import lua.UserData;

@:native("love.window")
extern class Window {

	public static function close(): Void;

	@:overload
	public static function fromPixels(pixelvalue:Float): Float;

	@:overload
	public static function fromPixels(px:Float, py:Float): FromPixels;

	public static function getDPIScale(): Float;

	public static function getDesktopDimensions(displayindex:Float = Dynamic): DesktopDimensions;

	public static function getDisplayCount(): Float;

	public static function getDisplayName(displayindex:Float = Dynamic): String;

	public static function getDisplayOrientation(displayindex:Float = null): Dynamic;

	public static function getFullscreen(): Fullscreen;

	public static function getFullscreenModes(displayindex:Float = Dynamic): Table<Dynamic,Dynamic>;

	public static function getIcon(): Dynamic;

	public static function getMode(): Mode;

	public static function getPosition(): Position;

	public static function getSafeArea(): SafeArea;

	public static function getTitle(): String;

	public static function getVSync(): Float;

	public static function hasFocus(): Bool;

	public static function hasMouseFocus(): Bool;

	public static function isDisplaySleepEnabled(): Bool;

	public static function isMaximized(): Bool;

	public static function isMinimized(): Bool;

	public static function isOpen(): Bool;

	public static function isVisible(): Bool;

	public static function maximize(): Void;

	public static function minimize(): Void;

	public static function requestAttention(continuous:Bool = Dynamic): Void;

	public static function restore(): Void;

	public static function setDisplaySleepEnabled(enable:Bool): Void;

	@:overload
	public static function setFullscreen(fullscreen:Bool): Bool;

	@:overload
	public static function setFullscreen(fullscreen:Bool, fstype:Dynamic): Bool;

	public static function setIcon(imagedata:Dynamic): Bool;

	public static function setMode(width:Float, height:Float, flags:Table<Dynamic,Dynamic>): Bool;

	public static function setPosition(x:Float, y:Float, displayindex:Float = Dynamic): Void;

	public static function setTitle(title:String): Void;

	public static function setVSync(vsync:Float): Void;

	@:overload
	public static function showMessageBox(title:String, message:String, type:Dynamic = Dynamic, attachtowindow:Bool = Dynamic): Bool;

	@:overload
	public static function showMessageBox(title:String, message:String, buttonlist:Table<Dynamic,Dynamic>, type:Dynamic = Dynamic, attachtowindow:Bool = Dynamic): Float;

	@:overload
	public static function toPixels(value:Float): Float;

	@:overload
	public static function toPixels(x:Float, y:Float): ToPixels;

	public static function updateMode(width:Float, height:Float, settings:Table<Dynamic,Dynamic>): Bool;

}

extern public class FromPixels {
	public var x:Float;
	public var y:Float;
}

extern public class DesktopDimensions {
	public var width:Float;
	public var height:Float;
}

extern public class Fullscreen {
	public var fullscreen:Bool;
	public var fstype:Dynamic;
}

extern public class Mode {
	public var width:Float;
	public var height:Float;
	public var flags:Table<Dynamic,Dynamic>;
}

extern public class Position {
	public var x:Float;
	public var y:Float;
	public var displayindex:Float;
}

extern public class SafeArea {
	public var x:Float;
	public var y:Float;
	public var w:Float;
	public var h:Float;
}

extern public class ToPixels {
	public var px:Float;
	public var py:Float;
}

enum abstract DisplayOrientation {
	var Unknown = "unknown";
	var Landscape = "landscape";
	var Landscapeflipped = "landscapeflipped";
	var Portrait = "portrait";
	var Portraitflipped = "portraitflipped";
}

enum abstract FullscreenType {
	var Desktop = "desktop";
	var Exclusive = "exclusive";
	var Normal = "normal";
}

enum abstract MessageBoxType {
	var Info = "info";
	var Warning = "warning";
	var Error = "error";
}

