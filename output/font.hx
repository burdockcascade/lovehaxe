// DO NOT EDIT THIS FILE
// GENERATED ON 2024-05-04 00:04:23

package love.font;

import haxe.extern.Rest;
import lua.Table;
import lua.UserData;

@:native("love.font")
extern class Font {

	@:overload
	public static function newBMFontRasterizer(imageData:Dynamic, glyphs:String, dpiscale:Float = Dynamic): Dynamic;

	@:overload
	public static function newBMFontRasterizer(fileName:String, glyphs:String, dpiscale:Float = Dynamic): Dynamic;

	public static function newGlyphData(rasterizer:Dynamic, glyph:Float): Void;

	public static function newImageRasterizer(imageData:Dynamic, glyphs:String, extraSpacing:Float = Dynamic, dpiscale:Float = Dynamic): Dynamic;

	@:overload
	public static function newRasterizer(filename:String): Dynamic;

	@:overload
	public static function newRasterizer(data:Dynamic): Dynamic;

	@:overload
	public static function newRasterizer(size:Float = Dynamic, hinting:Dynamic = Dynamic, dpiscale:Float = Dynamic): Dynamic;

	@:overload
	public static function newRasterizer(fileName:String, size:Float = Dynamic, hinting:Dynamic = Dynamic, dpiscale:Float = Dynamic): Dynamic;

	@:overload
	public static function newRasterizer(fileData:Dynamic, size:Float = Dynamic, hinting:Dynamic = Dynamic, dpiscale:Float = Dynamic): Dynamic;

	@:overload
	public static function newRasterizer(imageData:Dynamic, glyphs:String, dpiscale:Float = Dynamic): Dynamic;

	@:overload
	public static function newRasterizer(fileName:String, glyphs:String, dpiscale:Float = Dynamic): Dynamic;

	@:overload
	public static function newTrueTypeRasterizer(size:Float = Dynamic, hinting:Dynamic = Dynamic, dpiscale:Float = Dynamic): Dynamic;

	@:overload
	public static function newTrueTypeRasterizer(fileName:String, size:Float = Dynamic, hinting:Dynamic = Dynamic, dpiscale:Float = Dynamic): Dynamic;

	@:overload
	public static function newTrueTypeRasterizer(fileData:Dynamic, size:Float = Dynamic, hinting:Dynamic = Dynamic, dpiscale:Float = Dynamic): Dynamic;

}

extern class GlyphData extends Data {

	public static function getAdvance(): Float;

	public static function getBearing(): BearingResult;

	public static function getBoundingBox(): BoundingBoxResult;

	public static function getDimensions(): DimensionsResult;

	public static function getFormat(): Dynamic;

	public static function getGlyph(): Float;

	public static function getGlyphString(): String;

	public static function getHeight(): Float;

	public static function getWidth(): Float;

}

extern class Rasterizer extends Object {

	public static function getAdvance(): Float;

	public static function getAscent(): Float;

	public static function getDescent(): Float;

	public static function getGlyphCount(): Float;

	@:overload
	public static function getGlyphData(glyph:String): Dynamic;

	@:overload
	public static function getGlyphData(glyphNumber:Float): Dynamic;

	public static function getHeight(): Float;

	public static function getLineHeight(): Float;

	public static function hasGlyphs(glyph1:Dynamic, glyph2:Dynamic, ...:Dynamic): Bool;

}

enum abstract HintingMode {
	var Normal = "normal";
	var Light = "light";
	var Mono = "mono";
	var None = "none";
}

